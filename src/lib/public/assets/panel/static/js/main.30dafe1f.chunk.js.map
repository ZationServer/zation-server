{"version":3,"sources":["assets/image/zation-logo.svg","assets/image/zationLogo.svg","assets/image/user.svg","views/loading/Loading.js","views/login/Login.js","core/PathTool.js","components/sidebar/Sidebar.js","core/DataEngine.js","components/infoCard/RTInfoCard.js","components/chartTools/customTooltips.js","components/realTimeCardCharts/RealTimeFunc.js","components/realTimeCardCharts/RealTimeCard.js","components/realTimeCardCharts/BigRealTimeCard.js","components/realTimeCardCharts/RealTimePercentCard.js","components/realTimeCardCharts/RealTimeNetworkCard.js","views/panel/dashboard/Dashboard.js","components/realTimeCardCharts/RTTableCard.js","core/Time.js","components/chartTools/TableProgressRow.js","views/panel/servers/Server.js","components/infoCard/InfoCard.js","components/chartTools/barZeroCompensation.js","components/infoCard/BigBarCardInfo.js","views/panel/ping/Ping.js","components/realTimeCardCharts/RTPieCard.js","components/realTimeCardCharts/RTSwitchBarCard.js","views/panel/clients/Clients.js","core/ObjTool.js","components/realTimeCardCharts/RTServerInfoCard.js","views/panel/servers/ServerDetail.js","views/panel/main/MainPanel.js","views/error/Error.js","core/PingEngine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loading","react_default","a","createElement","className","react_center_dist_default","react_spinners","heightUnit","widthUnit","height","width","color","Component","shake","id","document","getElementById","classList","remove","setTimeout","add","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleKeyPress","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","key","login","stop","_x","apply","arguments","state","loading","error","_this2","classes","src","Logo","alt","data-validate","onChange","setState","onKeyPress","bind","type","name","placeholder","Fab","disabled","variant","aria-label","onClick","fab","username","value","password","isOk","length","client","load","request","systemController","controller","data","onSuccessful","_callee2","_context2","_this3","app","loadPanel","onError","send","_isMount","params","get","prototype","withStyles","theme","margin","spacing","unit","extendedIcon","marginRight","PathTool","path","substring","lastIndexOf","restPath","mainPath","Sidebar","NavLink","to","ria-current","exact","activeClassName","fa","miniSidebar","body","getElementsByTagName","sideBar","getElementsByClassName","toggle","EventEmitter","require","DataEngine","storage","clusterInfoStorage","panelAuthUserMap","defaultUserName","clusterBrokerList","workerCount","instanceCount","emitter","setWorkerTimeoutChecker","undefined","channelReact","onPubPanelOutCh","firstPong","info","update","startedTime","Date","now","cpuFullUsage","totalMemory","usedMemory","usedDrive","totalDrive","netInput","netOutput","brokerCount","clientCount","httpRequests","wsRequests","debug","useScUws","defaultUserGroupCount","authUserGroup","instanceId","hasOwnProperty","instance","workerFullId","serverStartedTimestamp","cpu","memory","drive","net","workers","worker","user","_processAuthUserGroup","totalMemMb","usedMemMb","totalGb","usedGb","inputMb","outputMb","authUserGroups","emit","authUserMain","group","event","_checkWorkerExists","idTarget","_getIdTarget","_updateSystemInfo","brokers","master","refreshWorkerPing","res","map","k","_createWorker","hostname","port","postKey","secure","appName","ip","_updatePanelAuthUserMap","_updatePanelDefaultName","generalSystemInfo","cpuModel","cpuCount","platform","oos","instanceInfo","pidInfo","timeout","setInterval","processClusterInfo","workerStartedTimestamp","aWorkerIsDown","workerId","_checkInstanceIsDown","count","pulse","node","RTInfoCard","btnSwitchId","btnTimeId","defaultSwitch","switchDefault","play","switch","style","minHeight","big","green","changeTime","btnSwitch","description","children","CustomTooltips","tooltipModel","ClassName","Selector","DIV","SPAN","TOOLTIP","concat","_chart","canvas","_idMaker","Math","random","toString","_canvasId","_setCanvasId","tooltip","parentNode","appendChild","opacity","yAlign","titleLines","title","tooltipHeader","forEach","tooltipHeaderTitle","innerHTML","tooltipBody","item","lines","i","tooltipBodyItem","colors","labelColors","tooltipBodyItemColor","backgroundColor","split","tooltipBodyItemLabel","tooltipBodyItemValue","pop","positionY","offsetTop","positionX","offsetLeft","left","caretX","top","caretY","updateDataSet","newData","maxLength","push","shift","RealTimeCard","firstData","getData","chartOptions","animation","spanGaps","tooltips","enabled","custom","maintainAspectRatio","legend","display","layout","padding","right","scales","xAxes","time","gridLines","zeroLineColor","ticks","fontSize","fontColor","beginAtZero","yAxes","elements","line","tension","borderWidth","point","radius","hitRadius","hoverRadius","postFix","callbacks","label","tooltipItems","yLabel","d1","d2","setMilliseconds","getMilliseconds","every","datasets","getDataLabel","dataLabel","borderColor","x","y","isRunning","infoCard_RTInfoCard","getValue","showTimeControl","getDescription","onTimeChange","timeChange","es","options","clearInterval","interval","process","componentDidMount","datasetsCopy","slice","dataCopy","assign","BigRealTimeCard","labels","position","fillDataSet","assertThisInitialized","_this4","d","RealTimePercentCard","getPercent","aria-valuemin","aria-valuemax","nodeHtmlLabel","cytoscape","use","euler","layoutOptions","randomize","animate","RealTimeNetworkCard","currentData","_processData","ids","_datasetIds","_runBuildCommands","_buildCommands","edges","nodes","addNodes","addEdges","indexOf","index","splice","removeIds","commands","cy","startBatch","changes","run","endBatch","instances","getEngine","masterId","clusterBrokersList","showClusterBrokers","clusterBrokers","Array","isArray","v","nodeId","nodeMasterId","workerNodeId","source","target","brokerId","brokerNodeId","container","selector","background-color","line-color","query","valign","halign","valignBox","halignBox","tpl","Dashboard","realTimeCardCharts_RealTimeCard","getClientsConnectedDesc","getClientsConnected","getWorkerDesc","getWorkerOnline","realTimeCardCharts_RealTimePercentCard","getCpuUsage","getMemoryUsage","getMemoryUsagePercent","realTimeCardCharts_BigRealTimeCard","reduce","b","getRequestData","realTimeCardCharts_RealTimeNetworkCard","Number","toFixed","current","createMuiTheme","typography","useNextVariants","overrides","MuiPaper","root","boxShadow","MuiTableCell","fontFamily","MuiTableSortLabel","&:hover","&:focus","active","MuiIconButton","outline","RTTableCard","styles","material_table_default","actions","columns","paging","toolbar","headerStyle","Time","timestamp","toUTCString","timespan","parseInt","TableProgressRow","maxWidth","textAlign","progress","serverTableColumns","field","filtering","render","rowData","leader","chartTools_TableProgressRow","Server","realTimeCardCharts_RTTableCard","icon","FaInfoCircle","history","iconProps","getServerTableData","dataset","reqCount","isLeader","age","processAge","requestCount","InfoCard","extraBig","zeroCompensation","renderZeroCompensation","chartInstance","view","_view","context","chart","ctx","startX","beginPath","strokeStyle","moveTo","lineTo","stroke","afterDatasetsDraw","easing","meta","getDatasetMeta","dataSet","config","BigBarCardInfo","scaleBeginAtZero","barBeginAtOrigin","barPercentage","suggestedMin","min","infoCard_InfoCard","buildDataSet","plugins","redraw","Ping","mode","btnLoad","infoCard_BigBarCardInfo","avg","refresh","sum","t0","ping","t1","sent","bottom","RTPieCard","RTSwitchBarCard","callback","isInteger","stepSize","getSwitchDefault","onSwitchChange","switchChange","Clients","getClientCount","realTimeCardCharts_RTPieCard","getPieUserGroupsData","getPieUserGroupsValue","realTimeCardCharts_RTSwitchBarCard","getClientDistributionData","getClientDistributionSwitchDefault","getClientDistributionDesc","instanceNum","hoverBackgroundColor","dataEngine","_addGroup","auth","keys","ObjTool","obj","RTServerInfoCard","broker","driveUsage","processDate","countKeys","usedPercentage","workerTableColumns","brokerTableColumns","ServerDetail","match","realTimeCardCharts_RTServerInfoCard","getRequestsDesc","getRequest","getMemoryUsageValue","getWorkerTableData","getBrokerTableData","bId","brokerStartedTimestamp","system","wId","Chart","defaults","global","duration","MainPanel","getTokenVariable","setTaskProcessClusterInfo","BrowserRouter","Navbar","bg","Button","switchSidebar","Brand","href","logo","switchAccountDropDown","avatar","logout","sidebar_Sidebar","Route","component","addEventListener","offAccountDropDown","preventDefault","contains","accountDropdown","deauthenticate","window","location","pathname","getMainPath","Error","index_es","message","reload","PingEngine","intervalMs","pubPanelInCh","App","errorMessage","Loading_Loading","views_login_Login","panel_main_MainPanel","views_error_Error","subPanelOutCh","connect","startPing","msg","_this5","_callee3","_context3","create","save","eventReact","onDisconnect","isConnected","setError","onServerDeauthenticate","toAuth","getSocket","getAuthToken","getTokenPanelAccess","ConnectionAbortError","isNotMainPath","Boolean","ReactDOM","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30dafe1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zation-logo.d46e3e57.svg\";","module.exports = __webpack_public_path__ + \"static/media/zationLogo.fe76f2a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.c50d87dc.svg\";","import React, {Component} from 'react';\nimport './Loading.css';\nimport { ScaleLoader} from 'react-spinners';\nimport RCenter from 'react-center';\n\nexport default class Loading extends Component\n{\n    render() {\n        return (\n            <div className=\"App transition-item detail-page darkTheme\">\n                <RCenter className={\"fullHeight\"}>\n                    <ScaleLoader\n                        heightUnit={\"em\"}\n                        widthUnit={\"em\"}\n                        height={7}\n                        width={0.6}\n                        color={'#3099bb'}\n                    />\n                </RCenter>\n            </div>\n        );\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport RCenter from \"react-center\";\nimport './Login.css'\nimport Logo from './../../assets/image/zation-logo.svg'\nimport Fab from \"@material-ui/core/es/Fab/Fab\";\nimport {load} from \"zation-client\";\nimport {ClipLoader} from 'react-spinners';\n\nconst styles = theme => ({\n    fab: {\n        margin: theme.spacing.unit\n    },\n    extendedIcon: {\n        marginRight: theme.spacing.unit,\n    },\n});\n\nconst shake = (id) => {\n    document.getElementById(id).classList.remove('shake');\n    setTimeout(() => {\n        document.getElementById(id).classList.add('shake');\n    },10);\n};\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading : false,\n            error : false\n        };\n    }\n\n    render() {\n        const { classes } = this.props;\n        const {error} = this.state;\n        return (\n            <div className=\"App transition-item detail-page darkTheme\">\n                <RCenter className={\"fullHeight\"}>\n                    <div id=\"login-co\" className={'loginContainer fadeIn animated'}>\n                    <div className={'logoContainer'}>\n                        <img src={Logo} alt={\"Zation Logo\"} width={'110em'} height={'110em'} className={'logo'}/>\n                        <h1 className={'logoText'}>LOG IN</h1>\n                    </div>\n                        <div className={'form'}>\n                            <div id=\"username-co\" className={\"wrap-input100 validate-input animated \" + (error ? 'wrap-input-error' : '')} data-validate=\"Enter username\">\n                                <input onChange={() => {this.setState({error : false})}} id=\"username\" onKeyPress={this._handleKeyPress.bind(this)}\n                                       className=\"input100\" type=\"text\" name=\"username\" placeholder=\"Username\"/>\n                                    <span className=\"focus-input100 focus-input-user\"/>\n                            </div>\n                            <div id=\"password-co\" className={\"wrap-input100 validate-input animated \"  + (error ? 'wrap-input-error' : '')} data-validate=\"Enter password\">\n                                <input onChange={() => {this.setState({error : false})}} id=\"password\" onKeyPress={this._handleKeyPress.bind(this)}\n                                       className=\"input100\" type=\"password\" name=\"username\" placeholder=\"Password\"/>\n                                <span className=\"focus-input100 focus-input-lock\"/>\n                            </div>\n                        </div>\n                        <div className={'btnContainer'}>\n                            <Fab disabled={this.state.loading} variant=\"extended\" aria-label=\"Delete\" onClick={this.login.bind(this)} className={'btn loginBtn '+classes.fab}>\n                                {!this.state.loading ? \"Login\" : <ClipLoader color={'white'}/>}\n                            </Fab>\n                        </div>\n                    </div>\n                </RCenter>\n            </div>\n        );\n    }\n\n    _handleKeyPress = async (e) => {\n        if (e.key === 'Enter') {\n            await this.login();\n        }\n    };\n\n    async login() {\n\n        const username = document.getElementById('username').value;\n        const password = document.getElementById('password').value;\n\n        let isOk = true;\n\n        if(username.length === 0){\n            isOk = false;\n            shake('username-co');\n        }\n        if(password.length === 0){\n            isOk = false;\n            shake('password-co');\n        }\n\n        if(this.state.error){\n            shake('username-co');\n            shake('password-co');\n            isOk = false;\n        }\n\n        if(isOk){\n\n            this.setState({loading : true});\n\n            const client = load();\n\n            await client.request()\n                .systemController(true)\n                .controller('zation/panel/auth')\n                .data({username : username, password : password})\n                .onSuccessful(() => {\n                    document.getElementById('login-co').classList.add('fadeOut');\n                    setTimeout(async () => {\n                        await this.props.app.loadPanel();\n                    },500);\n                })\n                .onError(() => {\n                    this.setState({error : true});\n                    shake('username-co');\n                    shake('password-co');\n                })\n                .send();\n\n            setTimeout(() => {\n                this.setState({loading : false});\n            },500);\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMount = false;\n    }\n\n    componentDidMount() {\n        this._isMount = true;\n    }\n\n    setState(params) {\n        if (this._isMount) {\n            super.setState(params);\n        }\n    }\n\n}\n\nexport default withStyles(styles)(Login);\n\n","/*\nAuthor: Luca Scaringella\nGitHub: LucaCode\n©Copyright by Luca Scaringella\n */\n\nexport default class PathTool {\n\n    static getMainPath(path){\n        return path.substring(0,(path.lastIndexOf('/panel')+6));\n    }\n\n    static isNotMainPath(path){\n        const restPath = path.substring(path.lastIndexOf('/panel')+6);\n        return restPath !== '' && restPath !== '/'\n    }\n}\n\nPathTool.mainPath = '';\n\n","import React, {Component} from 'react';\nimport './sidebar.css';\nimport { FaTachometerAlt, FaServer, FaUser, FaStopwatch} from 'react-icons/fa';\nimport { NavLink } from \"react-router-dom\";\nimport PathTool from \"../../core/PathTool\";\n\nclass Sidebar extends Component {\n    render() {\n        return (\n            <div className=\"sidebar ps--active-y ps\">\n                <div className=\"scrollbar-container sidebar-nav ps ps-container ps--active-y\">\n                    <ul className=\"nav\">\n                        <li className=\"nav-item\">\n                            <NavLink to={PathTool.mainPath+\"/\"} className=\"nav-link\" ria-current=\"page\" exact={true} activeClassName=\"active\">\n                                <FaTachometerAlt className=\"nav-icon\"/>\n                                Overview</NavLink>\n                        </li>\n                        <li className=\"nav-title\">Details</li>\n                        <li className=\"nav-item\">\n                            <NavLink to={PathTool.mainPath+\"/server\"} className=\"nav-link\" ria-current=\"page\" activeClassName=\"active\">\n                                <FaServer className=\"nav-icon\"/>\n                                Server</NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink to={PathTool.mainPath+\"/clients\"} className=\"nav-link\" ria-current=\"page\" activeClassName=\"active\">\n                                <FaUser className=\"nav-icon\"/>\n                                Clients</NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink to={PathTool.mainPath+\"/ping\"} className=\"nav-link\" ria-current=\"page\" activeClassName=\"active\">\n                                <FaStopwatch className=\"nav-icon\"/>\n                                Ping</NavLink>\n                        </li>\n                    </ul>\n                </div>\n                <button className=\"sidebar-minimizer mt-auto\" onClick={this.miniSidebar.bind(this)} type=\"button\">\n                </button>\n            </div>\n        )\n    }\n\n    // noinspection JSMethodCanBeStatic\n    miniSidebar(){\n        const body = document.getElementsByTagName('body')[0];\n        const sideBar = document.getElementsByClassName('sidebar')[0];\n\n        body.classList.toggle('brand-minimized');\n        body.classList.toggle('sidebar-minimized');\n\n        sideBar.classList.toggle('ps--active-y');\n        sideBar.classList.toggle('ps');\n    }\n}\n\nexport default Sidebar;\n","/*\nAuthor: Luca Scaringella\nGitHub: LucaCode\n©Copyright by Luca Scaringella\n */\n\nimport {load}        from \"zation-client\";\nconst EventEmitter = require('events');\n\nconst workerCheckTime = 7000;\nconst workerTimeout = 5000;\n\nexport default class DataEngine {\n\n    constructor() {\n        /*\n        Structure\n        instanceId ->\n            workers ->\n                workerFullId ->\n                    id\n                    workerStartedTimestamp\n                    clientCount\n                    user ->\n                        defaultUserGroupCount\n                        authUserGroups ->\n                            userGroup\n                    httpRequests\n                    wsRequests\n                    cpu\n                    memory\n            brokerCount\n            brokers ->\n                id ->\n                    pid\n                    system ->\n                        cpu\n                        memory\n                    brokerStartedTimestamp\n            master ->\n                isLeader\n                pid\n                clusterMode\n            hostname\n            port\n            path\n            postKey\n            secure\n            appName\n            debug\n            useScUws\n            serverStartedTimestamp\n            ip\n            cpuModel\n            cpuCount\n            platform\n            oos\n            drive ->\n                totalGb\n                usedGb\n                usedPercentage\n            memory ->\n                totalMemMb\n                usedMemMb\n            net ->\n                inputMb\n                outputMb\n            cpu\n         */\n        this.storage = {};\n        /*\n        cpu\n        memory ->\n            totalMemMb\n            usedMemMb\n        drive ->\n            totalGb\n            usedGb\n        net ->\n            inputMb\n            outputMb\n        brokerCount\n        serverStartedTimestamp\n        clientCount\n        httpRequests\n        wsRequests\n        debug\n        useScUws\n        user ->\n            defaultUserGroupCount\n            authUserGroups ->\n                userGroup\n         */\n        this.clusterInfoStorage = {};\n        /*\n        userGroupName\n         */\n        this.panelAuthUserMap = {};\n        this.defaultUserName = '';\n\n        this.clusterBrokerList = [];\n\n        this.workerCount = 0;\n        this.instanceCount = 0;\n\n        this.emitter = new EventEmitter();\n        this.setWorkerTimeoutChecker();\n    }\n\n    connect(key = 'default')\n    {\n        const client = load(key);\n        client.channelReact().onPubPanelOutCh('firstPong' ,(data => {\n            this.firstPong(data.id,data.info);\n        }));\n        client.channelReact().onPubPanelOutCh('update-mainUpdate',(data => {\n            this.update('update-mainUpdate',data.id,data.info);\n        }));\n        client.channelReact().onPubPanelOutCh('update-workerStatus',(data => {\n            this.update('update-workerStatus',data.id,data.info);\n        }));\n        client.channelReact().onPubPanelOutCh('update-node',(data => {\n            this.update('update-node',data.id,data.info);\n        }));\n    }\n\n    processClusterInfo()\n    {\n        let startedTime = Date.now(),\n            cpuFullUsage = 0,\n            totalMemory = 0,\n            usedMemory = 0,\n            usedDrive = 0,\n            totalDrive = 0,\n            netInput = 0,\n            netOutput = 0,\n            brokerCount = 0,\n            clientCount = 0,\n            httpRequests = 0,\n            wsRequests = 0,\n            debug = false,\n            useScUws = true,\n            defaultUserGroupCount = 0,\n            authUserGroup = {};\n\n        for(let instanceId in this.storage) {\n            if(this.storage.hasOwnProperty(instanceId)) {\n                const instance = this.storage[instanceId];\n\n                if(instance.serverStartedTimestamp < startedTime) {\n                    startedTime = instance.serverStartedTimestamp;\n                }\n                if(instance.cpu) {\n                    cpuFullUsage+=instance.cpu;\n                }\n                if(instance.memory) {\n                    totalMemory+=instance.memory['totalMemMb'];\n                    usedMemory+=instance.memory['usedMemMb'];\n                }\n                if(instance.drive) {\n                    totalDrive+=instance.drive['totalGb'];\n                    usedDrive+=instance.drive['usedGb'];\n                }\n                if(instance.net) {\n                    netInput+=instance.net['inputMb'];\n                    netOutput+=instance.net['outputMb'];\n                }\n                brokerCount+=instance.brokerCount;\n\n                if(instance.debug) {\n                    debug = true;\n                }\n\n                if(!instance.useScUws){\n                    useScUws = false;\n                }\n\n                for(let workerFullId in instance.workers) {\n                    if(instance.workers.hasOwnProperty(workerFullId))\n                    {\n                        const worker = instance.workers[workerFullId];\n                        clientCount+=worker.clientCount;\n                        httpRequests+=worker.httpRequests;\n                        wsRequests+=worker.wsRequests;\n                        defaultUserGroupCount+=worker.user['defaultUserGroupCount'];\n                        this._processAuthUserGroup(authUserGroup,worker.user['authUserGroups']);\n                    }\n                }\n            }\n        }\n\n        this.clusterInfoStorage = {\n            cpu : (cpuFullUsage / this.instanceCount),\n            memory : {\n                totalMemMb : totalMemory,\n                usedMemMb : usedMemory\n            },\n            drive : {\n                totalGb : totalDrive,\n                usedGb : usedDrive\n            },\n            net : {\n                inputMb : netInput,\n                outputMb : netOutput\n            },\n            brokerCount : brokerCount,\n            serverStartedTimestamp : startedTime,\n            clientCount : clientCount,\n            httpRequests : httpRequests,\n            wsRequests : wsRequests,\n            debug : debug,\n            useScUws : useScUws,\n            user : {\n                defaultUserGroupCount : defaultUserGroupCount,\n                authUserGroups : authUserGroup\n            }\n        };\n\n        this.emitter.emit('clusterUpdate');\n    }\n\n    // noinspection JSMethodCanBeStatic\n    _processAuthUserGroup(authUserMain,authUserGroup)\n    {\n        for(let group in authUserGroup) {\n            if(authUserGroup.hasOwnProperty(group)) {\n                if(!authUserMain.hasOwnProperty(group)){\n                    authUserMain[group] = authUserGroup[group];\n                }\n                else {\n                    authUserMain[group]+=authUserGroup[group];\n                }\n            }\n        }\n    }\n\n    static getEngine() {\n        if (!DataEngine.instance) {\n            DataEngine.instance = new DataEngine();\n        }\n        return DataEngine.instance;\n    }\n\n    static reset(){\n        DataEngine.instance = new DataEngine();\n    }\n\n    update(event,id,info)\n    {\n        const instanceId = id['instanceId'];\n        const workerFullId = id['workerFullId'];\n\n        if(this._checkWorkerExists(instanceId,workerFullId))\n        {\n            const idTarget = this._getIdTarget(instanceId,workerFullId);\n            if(event === 'update-mainUpdate') {\n                this._updateSystemInfo(idTarget.instance,idTarget.worker,info['systemInfo']);\n                idTarget.worker.clientCount = info[\"clientCount\"];\n                idTarget.worker.user = info['user'];\n                this.emitter.emit('mainUpdate',instanceId,workerFullId,idTarget);\n            }\n            else if(event === 'update-workerStatus') {\n                idTarget.worker.httpRequests = info['httpRequests'];\n                idTarget.worker.wsRequests = info['wsRequests'];\n                this.emitter.emit('statusUpdate',instanceId,workerFullId,idTarget);\n            }\n            else if(event === 'update-node') {\n                idTarget.instance.brokers = info['brokers'];\n                idTarget.instance.master = info['master'];\n                this.clusterBrokerList = info['cBrokers'];\n                this.emitter.emit('nodeUpdate',instanceId,workerFullId,idTarget);\n            }\n            this.refreshWorkerPing(idTarget.worker);\n        }\n    }\n\n    _checkWorkerExists(instanceId,workerFullId) {\n        let res = false;\n        if(this.storage.hasOwnProperty(instanceId) &&\n            this.storage[instanceId].workers.hasOwnProperty(workerFullId)) {\n            res = true;\n        }\n        return res;\n    }\n\n    _getIdTarget(instanceId,workerFullId) {\n        return {\n            instance : this.storage[instanceId],\n            worker : this.storage[instanceId].workers[workerFullId]\n        }\n    }\n\n    _updatePanelAuthUserMap(map)\n    {\n        if(typeof map === 'object'){\n            for(let k in map) {\n                if(map.hasOwnProperty(k) && !this.panelAuthUserMap.hasOwnProperty(k)){\n                    this.panelAuthUserMap[k] = map[k];\n                }\n            }\n        }\n    }\n\n    _updatePanelDefaultName(name) {\n        if(!this.defaultUserName) {\n            this.defaultUserName = name;\n        }\n    }\n\n    firstPong(id,info) {\n        const instanceId = id['instanceId'];\n        if(!this.storage.hasOwnProperty(instanceId)) {\n            let instance = {};\n            instance.brokerCount   = info['brokerCount'];\n            instance.hostname      = info['hostname'];\n            instance.port          = info['port'];\n            instance.path          = info['path'];\n            instance.postKey       = info['postKey'];\n            instance.secure        = info['secure'];\n            instance.appName       = info['appName'];\n            instance.debug         = info['debug'];\n            instance.useScUws      = info['useScUws'];\n            instance.serverStartedTimestamp = info['serverStartedTimestamp'];\n            instance.ip            = info['ip'];\n            this._updatePanelAuthUserMap(info['panelAuthUserMap']);\n            this._updatePanelDefaultName(info['defaultUserName']);\n            const generalSystemInfo = info['generalSystemInfo'];\n            instance.cpuModel = generalSystemInfo['cpuModel'];\n            instance.cpuCount = generalSystemInfo['cpuCount'];\n            instance.platform = generalSystemInfo['platform'];\n            instance.oos      = generalSystemInfo['oos'];\n            instance.workers = {};\n            this.storage[instanceId] = instance;\n            this.instanceCount++;\n            this.emitter.emit('newInstance',instanceId);\n            this._createWorker(instance,id,info);\n        }\n        else {\n            this._createWorker(this.storage[instanceId],id,info);\n        }\n\n        if(id['workerId'] === 0){\n            this.clusterBrokerList = info['cBrokers'];\n            this.storage[instanceId].brokers = info['brokers'];\n            this.storage[instanceId].master = info['master'];\n        }\n    }\n\n    // noinspection JSMethodCanBeStatic\n    _updateSystemInfo(instance,worker,info)\n    {\n        const instanceInfo = info['instance'];\n        instance.drive = instanceInfo['drive'];\n        instance.memory = instanceInfo['memory'];\n        instance.net = instanceInfo['net'];\n        instance.cpu = instanceInfo['cpu'];\n        const pidInfo = info['pid'];\n        worker.cpu = pidInfo['cpu'];\n        worker.memory = pidInfo['memory'];\n    }\n\n\n    // noinspection JSMethodCanBeStatic\n    refreshWorkerPing(worker) {\n        worker.timeout = Date.now();\n    }\n\n    setTaskProcessClusterInfo() {\n        setInterval(() => {\n            this.processClusterInfo();\n        },1000)\n    }\n\n    // noinspection JSMethodCanBeStatic\n    _createWorker(instance,id,info)\n    {\n        const workers = instance.workers;\n        if(!workers.hasOwnProperty(id['workerFullId'])) {\n            let worker = {};\n            worker.id = id['workerId'];\n            worker.workerStartedTimestamp = info['workerStartedTimestamp'];\n            worker.clientCount = info['clientCount'];\n            this._updateSystemInfo(instance,worker,info['systemInfo']);\n            worker.user = info['user'];\n            worker.httpRequests = info['httpRequests'];\n            worker.wsRequests = info['wsRequests'];\n            this.refreshWorkerPing(worker);\n            workers[id['workerFullId']] = worker;\n            this.workerCount++;\n            this.emitter.emit('newWorker',id['workerFullId']);\n        }\n    }\n\n    setWorkerTimeoutChecker()\n    {\n        setInterval(() => {\n            for (let instanceId in this.storage) {\n                if (this.storage.hasOwnProperty(instanceId)) {\n                    const workers = this.storage[instanceId].workers;\n                    let aWorkerIsDown = false;\n                    for (let workerId in workers) {\n                        if (workers.hasOwnProperty(workerId) && ((Date.now() - workers[workerId].timeout) > workerTimeout)) {\n                            delete workers[workerId];\n                            this.workerCount--;\n                            aWorkerIsDown = true;\n                            this.emitter.emit('workerLeft', workerId);\n                        }\n                    }\n                    if(aWorkerIsDown){\n                        this._checkInstanceIsDown(this.storage[instanceId],instanceId);\n                    }\n                }\n            }\n        },workerCheckTime);\n    }\n\n    _checkInstanceIsDown(instance,id)\n    {\n        const workers = instance.workers;\n        let count = 0;\n        for(let k in workers) {\n            if(workers.hasOwnProperty(k)){\n                count++;\n            }\n        }\n        if(count === 0) {\n            delete this.storage[id];\n            this.instanceCount--;\n            this.emitter.emit('instanceLeft',id);\n        }\n    }\n}\n\n","import React, {Component} from 'react';\nimport './infoCard.css'\nimport {FaPlay, FaPause, FaArrowsAltH} from 'react-icons/fa';\n\nconst pulse = (id) => {\n    const node = document.getElementById(id);\n    if(node){\n        node.classList.remove('pulse');\n        setTimeout(() => {\n            node.classList.add('pulse');\n        }, 10);\n    }\n};\n\nclass RTInfoCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.btnSwitchId = 'rt-switchControl-' + RTInfoCard.btnSwitchId;\n        this.btnTimeId = 'rt-timeControl-' + RTInfoCard.btnTimeId;\n        RTInfoCard.btnTimeId++;\n        RTInfoCard.btnSwitchId++;\n        this.defaultSwitch = this.props.switchDefault;\n\n        this.state = {\n            play: true,\n            switch: this.defaultSwitch\n        };\n    }\n\n    render() {\n        return (\n            <div style={this.props.height ? {height : this.props.height} : (this.props.minHeight ? {minHeight : this.props.minHeight} : {})}\n                 className={\"text-white bg-info card\" + (this.props.big ? ' big-card' : '') + (this.props.green ? ' cardGreen' : '')}>\n                <div className=\"pb-0 card-body\">\n                    <div id=\"carouselButtons\">\n                        <button id={this.btnTimeId} type=\"button\" className=\"btn btn-time-control animated\"\n                                onClick={this.changeTime.bind(this)}>\n                            {\n                                this.state.play ? <FaPause height={30} width={30} className=\"timeIcon\"/> :\n                                    <FaPlay height={20} width={20} className=\"timeIcon\"/>\n                            }\n                        </button>\n                        {\n                            this.props.switch?\n                                <button id={this.btnSwitchId} type=\"button\" className=\"btn btn-switch-control animated\"\n                                onClick={this.btnSwitch.bind(this)}>\n                                    <FaArrowsAltH height={30} width={30} className=\"switchIcon\"/>\n                                </button> : undefined\n                        }\n                    </div>\n                    <div className=\"text-value\">\n                        {this.props.value}\n                    </div>\n                    <div>\n                        {this.props.description}\n                    </div>\n                </div>\n                {this.props.children}\n            </div>\n        )\n    }\n\n    changeTime() {\n        pulse(this.btnTimeId);\n        this.setState({\n            play: !this.state.play\n        },() => {\n            if (typeof this.props['onTimeChange'] === 'function') {\n                this.props['onTimeChange'](this.state.play);\n            }\n        });\n    }\n\n    btnSwitch() {\n        pulse(this.btnSwitchId);\n        this.setState({\n            switch: !this.state.switch\n        },() => {\n            if (typeof this.props['onSwitchChange'] === 'function') {\n                this.props['onSwitchChange'](this.state.switch);\n            }\n        });\n    }\n}\n\nRTInfoCard.btnSwitchId = 0;\nRTInfoCard.btnTimeId = 0;\n\nexport default RTInfoCard;\n","function CustomTooltips(tooltipModel) {\n    const _setCanvasId = () => {\n        const _idMaker = () => {\n            const _hex = 16;\n            const _multiplier = 0x10000;\n            return ((1 + Math.random()) * _multiplier | 0).toString(_hex)\n        };\n        const _canvasId = `_canvas-${_idMaker() + _idMaker()}`;\n        this._chart.canvas.id = _canvasId;\n        return _canvasId\n    };\n\n    const ClassName = {\n        ABOVE                   : 'above',\n        BELOW                   : 'below',\n        CHARTJS_TOOLTIP         : 'chartjs-tooltip',\n        NO_TRANSFORM            : 'no-transform',\n        TOOLTIP_BODY            : 'tooltip-body',\n        TOOLTIP_BODY_ITEM       : 'tooltip-body-item',\n        TOOLTIP_BODY_ITEM_COLOR : 'tooltip-body-item-color',\n        TOOLTIP_BODY_ITEM_LABEL : 'tooltip-body-item-label',\n        TOOLTIP_BODY_ITEM_VALUE : 'tooltip-body-item-value',\n        TOOLTIP_HEADER          : 'tooltip-header',\n        TOOLTIP_HEADER_ITEM     : 'tooltip-header-item'\n    };\n\n    const Selector = {\n        DIV     : 'div',\n        SPAN    : 'span',\n        TOOLTIP : `${this._chart.canvas.id || _setCanvasId()}-tooltip`\n    };\n\n    let tooltip = document.getElementById(Selector.TOOLTIP);\n\n    if (!tooltip) {\n        tooltip = document.createElement('div');\n        tooltip.id = Selector.TOOLTIP;\n        tooltip.className = ClassName.CHARTJS_TOOLTIP;\n        this._chart.canvas.parentNode.appendChild(tooltip)\n    }\n\n    if (tooltipModel.opacity === 0) {\n        tooltip.style.opacity = 0;\n        return\n    }\n\n    tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM);\n    if (tooltipModel.yAlign) {\n        tooltip.classList.add(tooltipModel.yAlign)\n    } else {\n        tooltip.classList.add(ClassName.NO_TRANSFORM)\n    }\n\n    if (tooltipModel.body) {\n        const titleLines = tooltipModel.title || [];\n\n        const tooltipHeader = document.createElement(Selector.DIV);\n        tooltipHeader.className = ClassName.TOOLTIP_HEADER;\n\n        titleLines.forEach((title) => {\n            const tooltipHeaderTitle = document.createElement(Selector.DIV);\n            tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM;\n            tooltipHeaderTitle.innerHTML = title;\n            tooltipHeader.appendChild(tooltipHeaderTitle)\n        });\n\n        const tooltipBody = document.createElement(Selector.DIV);\n        tooltipBody.className = ClassName.TOOLTIP_BODY;\n\n        const tooltipBodyItems = tooltipModel.body.map((item) => item.lines);\n        tooltipBodyItems.forEach((item, i) => {\n            const tooltipBodyItem = document.createElement(Selector.DIV);\n            tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM;\n\n            const colors = tooltipModel.labelColors[i];\n\n            const tooltipBodyItemColor = document.createElement(Selector.SPAN);\n            tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR;\n            tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor;\n\n            tooltipBodyItem.appendChild(tooltipBodyItemColor);\n\n            if (item[0].split(':').length > 1) {\n                const tooltipBodyItemLabel = document.createElement(Selector.SPAN);\n                tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL;\n                tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0];\n\n                tooltipBodyItem.appendChild(tooltipBodyItemLabel);\n\n                const tooltipBodyItemValue = document.createElement(Selector.SPAN);\n                tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE;\n                tooltipBodyItemValue.innerHTML = item[0].split(': ').pop();\n\n                tooltipBodyItem.appendChild(tooltipBodyItemValue)\n            } else {\n                const tooltipBodyItemValue = document.createElement(Selector.SPAN);\n                tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE;\n                tooltipBodyItemValue.innerHTML = item[0];\n\n                tooltipBodyItem.appendChild(tooltipBodyItemValue)\n            }\n\n            tooltipBody.appendChild(tooltipBodyItem)\n        });\n\n        tooltip.innerHTML = '';\n\n        tooltip.appendChild(tooltipHeader);\n        tooltip.appendChild(tooltipBody)\n    }\n\n    const positionY = this._chart.canvas.offsetTop;\n    const positionX = this._chart.canvas.offsetLeft;\n    tooltip.style.opacity = 1;\n    tooltip.style.left = `${positionX + tooltipModel.caretX}px`;\n    tooltip.style.top = `${positionY + tooltipModel.caretY}px`;\n}\n\nexport default CustomTooltips","export const updateDataSet = (data,newData,maxLength) =>{\n    if(data.length >= maxLength) {\n        data.push(newData);\n        data.shift();\n        return data;\n    }\n    else {\n        data.push(newData);\n        return data;\n    }\n};","import React, {Component} from 'react';\nimport RTInfoCard from \"../../components/infoCard/RTInfoCard\";\nimport {Line} from \"react-chartjs-2\";\nimport CustomTooltips from \"../../components/chartTools/customTooltips\";\nimport {updateDataSet} from \"./RealTimeFunc\";\n\nclass RealTimeCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const firstData = this.props.getData();\n\n        this.chartOptions = {\n            animation: false,\n            spanGaps : true,\n            tooltips: {\n                enabled: false,\n                custom : CustomTooltips\n            },\n            maintainAspectRatio: false,\n            legend: {\n                display: false,\n            },\n            layout: {\n                padding: {\n                    top: 8,\n                    right : 8,\n                    left : 8\n                }\n            },\n            scales: {\n                xAxes: [\n                    {\n                        type: 'time',\n                        time: {\n                            unit: 'millisecond'\n                        },\n                        gridLines: {\n                            color: 'transparent',\n                            zeroLineColor: 'transparent',\n                        },\n                        ticks: {\n                            fontSize: 2,\n                            fontColor: 'transparent',\n                            beginAtZero:true\n                        },\n\n                    }],\n                yAxes: [\n                    {\n                        display: false,\n                        ticks: {\n                            display: false\n                        },\n                    }],\n            },\n            elements: {\n                line: {\n                    tension: 0.00001,\n                    borderWidth: 1,\n                },\n                point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                },\n            }\n        };\n\n\n        if(this.props.postFix){\n            this.chartOptions.tooltips.callbacks = {\n                label: (tooltipItems) => {\n                    return tooltipItems.yLabel + ' ' + this.props.postFix;\n                }\n            };\n        }\n\n        const d1 = new Date();\n        const d2 = new Date();\n        d2.setMilliseconds(d1.getMilliseconds()+((this.props.every / 2) || 1000));\n\n\n        const data = {\n            datasets: [\n                {\n                    label: this.props.getDataLabel ? this.props.getDataLabel(firstData) :\n                        (this.props.dataLabel ? this.props.dataLabel : ''),\n                    backgroundColor: 'rgba(255,255,255,.3)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [{\n                        x : d1,\n                        y : firstData\n                    },\n                        {\n                            x : d2,\n                            y : firstData\n                        }]\n                },\n            ],\n        };\n\n        this.state = {\n            value : firstData,\n            isRunning : true,\n            data : data\n        }\n    }\n\n\n    render() {\n        return (\n            <RTInfoCard value={this.getValue.bind(this)()} showTimeControl={true}\n                        description={this.getDescription.bind(this)()} onTimeChange={this.timeChange.bind(this)}>\n                <div className=\"chart-wrapper mx-3\" style={{ height: '70px'}}>\n                    <Line options={this.chartOptions} data={this.state.data} height={70} />\n                </div>\n            </RTInfoCard>\n        )\n    }\n\n    getDescription()\n    {\n        if(this.props.description){\n            return this.props.description;\n        }\n        if(this.props.getDescription){\n            return this.props.getDescription(this.state.value);\n        }\n        else {\n            return '';\n        }\n    }\n\n    getValue() {\n        if(this.props.getValue){\n            return this.props.getValue(this.state.value);\n        }\n        else {\n            return this.props.postFix ? this.state.value + \" \" + this.props.postFix : this.state.value;\n        }\n    }\n\n    timeChange(state){\n        if(!state && this.state.isRunning){\n            clearInterval(this.state.interval);\n            this.setState({isRunning : false});\n        }\n\n        if(state && !this.state.isRunning){\n            this.process.bind(this)();\n            this.componentDidMount.bind(this)();\n        }\n    }\n\n    componentDidMount() {\n\n        const interval = setInterval(() => {\n            this.process.bind(this)();\n\n        },this.props.every || 1000);\n\n        this.setState({interval : interval,isRunning : true})\n    }\n\n    process()\n    {\n        const datasetsCopy = this.state.data.datasets.slice(0);\n        const dataCopy = datasetsCopy[0].data.slice(0);\n\n        const data = this.props.getData();\n\n        datasetsCopy[0].data = updateDataSet(dataCopy,{\n            x: new Date(),\n            y: data\n        },this.props.maxLength);\n\n        if(this.props.getDataLabel) {\n            datasetsCopy[0].label = this.props.getDataLabel(data);\n        }\n\n        this.setState({\n            value : data,\n            data : Object.assign({},{\n                datasets: datasetsCopy\n            })\n        });\n    }\n\n    componentWillUnmount() {\n        if(this.state.interval){\n            clearInterval(this.state.interval);\n        }\n    }\n}\n\nexport default RealTimeCard;","import React, {Component} from 'react';\nimport RTInfoCard from \"../../components/infoCard/RTInfoCard\";\nimport {Line} from \"react-chartjs-2\";\nimport CustomTooltips from \"../../components/chartTools/customTooltips\";\nimport {updateDataSet} from \"./RealTimeFunc\";\n\nclass BigRealTimeCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.chartOptions = {\n            animation: false,\n            spanGaps : true,\n            tooltips: {\n                enabled: false,\n                custom : CustomTooltips\n            },\n            maintainAspectRatio: false,\n            legend: {\n                display: (this.props.legend !== undefined) ? this.props.legend : true,\n                labels : {\n                    fontColor : '#ffffff'\n                },\n                position : 'bottom'\n            },\n            layout: {\n                padding: {\n                    top: 8,\n                    right : 8,\n                    left : 8\n                }\n            },\n            scales: {\n                xAxes: [\n                    {\n                        type: 'time',\n                        time: {\n                            unit: 'millisecond'\n                        },\n                        gridLines: {\n                            color: 'transparent',\n                            zeroLineColor: 'transparent',\n                        },\n                        ticks: {\n                            fontSize: 2,\n                            fontColor: 'transparent',\n                            beginAtZero:true\n                        },\n\n                    }],\n                yAxes: [\n                    {\n                        display: false,\n                        ticks: {\n                            display: false\n                        },\n                    }],\n            },\n            elements: {\n                line: {\n                    borderWidth: 1,\n                },\n                point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                },\n            }\n        };\n\n\n        if(this.props.postFix){\n            this.chartOptions.tooltips.callbacks = {\n                label: (tooltipItems) => {\n                    return tooltipItems.yLabel + ' ' + this.props.postFix;\n                }\n            };\n        }\n\n        const firstData = this.props.getData();\n\n\n        const data = {\n            datasets: [\n            ],\n        };\n\n        this.state = {\n            value : firstData,\n            isRunning : true,\n            data : data\n        };\n\n        this.fillDataSet.bind(this)();\n\n    }\n\n    fillDataSet()\n    {\n        const d1 = new Date();\n        const d2 = new Date();\n        d2.setMilliseconds(d1.getMilliseconds()+((this.props.every /2) || 1000));\n\n        this.state.value.forEach((value,i) => {\n            this.state.data.datasets.push(\n                {\n                    label: this.props.label ? this.props.label[i] : this.props.getDataLabel(value),\n                    backgroundColor: i===0 ? 'rgba(48, 153, 187,.3)' : 'rgba(43, 225, 98,.3)',\n                    borderColor: i===0 ? 'rgba(48, 153, 187,.55)' : 'rgba(43, 225, 98,.55)',\n                    data: [{\n                        x : d1,\n                        y : value\n                    },\n                        {\n                            x : d2,\n                            y : value\n                        }]\n                }\n            );\n        });\n\n    }\n\n\n    render() {\n        return (\n            <RTInfoCard value={this.getValue.bind(this)()} big={true}\n                        description={this.getDescription.bind(this)()} onTimeChange={this.timeChange.bind(this)}>\n                <div className=\"chart-wrapper mx-3\" style={{ height: '300px'}}>\n                    <Line options={this.chartOptions} data={this.state.data} height={70}/>\n                </div>\n            </RTInfoCard>\n        )\n    }\n\n    getDescription()\n    {\n        if(this.props.description){\n            return this.props.description;\n        }\n        if(this.props.getDescription){\n            return this.props.getDescription(this.state.value);\n        }\n        else {\n            return '';\n        }\n    }\n\n    getValue() {\n        if(this.props.getValue){\n            return this.props.getValue(this.state.value);\n        }\n        else {\n            return this.props.postFix ? this.state.value + \" \" + this.props.postFix : this.state.value;\n        }\n    }\n\n    timeChange(state){\n        if(!state && this.state.isRunning){\n            clearInterval(this.state.interval);\n            this.setState({isRunning : false});\n        }\n\n        if(state && !this.state.isRunning){\n            this.process.bind(this)();\n            this.componentDidMount.bind(this)();\n        }\n    }\n\n    componentDidMount() {\n\n        const interval = setInterval(() => {\n            this.process.bind(this)();\n\n        },this.props.every || 1000);\n\n        this.setState({interval : interval,isRunning : true})\n    }\n\n    process()\n    {\n        const datasetsCopy = this.state.data.datasets.slice(0);\n\n        const data = this.props.getData();\n\n        data.forEach((d,i) => {\n            const dataCopy = datasetsCopy[i].data.slice(0);\n            datasetsCopy[i].data = updateDataSet(dataCopy,{\n                x: new Date(),\n                y: d\n            },this.props.maxLength);\n\n            if(this.props.getDataLabel) {\n                datasetsCopy[i].label = this.props.getDataLabel(d);\n            }\n        });\n\n        this.setState({\n            value : data,\n            data : Object.assign({},{\n                datasets: datasetsCopy\n            })\n        });\n    }\n\n    componentWillUnmount() {\n        if(this.state.interval){\n            clearInterval(this.state.interval);\n        }\n    }\n}\n\nexport default BigRealTimeCard;","import React, {Component} from 'react';\nimport RTInfoCard from \"../../components/infoCard/RTInfoCard\";\nimport './realTimePercentCard.css';\n\nclass RealTimePercentCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value : this.props.getPercent(),\n            isRunning : true,\n        }\n    }\n\n\n    render() {\n        return (\n            <RTInfoCard value={this.state.value + ' %'} showTimeControl={true}\n                        description={this.props.description} onTimeChange={this.timeChange.bind(this)}>\n                <div className=\"chart-wrapper mx-3\" style={{ height: '70px'}}>\n                   <div className={\"progress mb-3\"}>\n                       <div className={\"progress-bar\"} style={{width : (this.state.value + '%')}} aria-valuemin=\"0\" aria-valuemax=\"100\">\n                       </div>\n                   </div>\n                </div>\n            </RTInfoCard>\n        )\n    }\n\n    timeChange(state){\n        if(!state && this.state.isRunning){\n            clearInterval(this.state.interval);\n            this.setState({isRunning : false});\n        }\n\n        if(state && !this.state.isRunning){\n            this.process.bind(this)();\n            this.componentDidMount.bind(this)();\n        }\n    }\n\n    componentDidMount() {\n\n        const interval = setInterval(() => {\n            this.process.bind(this)();\n\n        },this.props.every || 1000);\n\n        this.setState({interval : interval,isRunning : true})\n    }\n\n    process()\n    {\n        this.setState({\n            value : this.props.getPercent()\n        });\n    }\n\n    componentWillUnmount() {\n        if(this.state.interval){\n            clearInterval(this.state.interval);\n        }\n    }\n}\n\nexport default RealTimePercentCard;","import React, {Component} from 'react';\nimport RTInfoCard from \"../../components/infoCard/RTInfoCard\";\nimport DataEngine from \"../../core/DataEngine\";\nimport './realTimeNetworkCard.css';\n\nimport cytoscape from'cytoscape';\nimport euler from 'cytoscape-euler';\nimport nodeHtmlLabel from 'cytoscape-node-html-label';\nnodeHtmlLabel(cytoscape);\ncytoscape.use(euler);\n\nconst layoutOptions = {\n    name: 'euler',\n    randomize: true,\n    animate: true\n};\n\nclass RealTimeNetworkCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.id = RealTimeNetworkCard.id;\n        RealTimeNetworkCard.id++;\n\n        this.currentData = this._processData();\n\n        this.state = {\n            isRunning: true,\n        };\n\n    }\n\n    process() {\n        const ids = this._datasetIds(this.currentData);\n        this.currentData = this._processData();\n        this._runBuildCommands(this._buildCommands(ids,this.currentData));\n    }\n\n    _buildCommands(ids,newData){\n        const elements = newData.edges.concat(newData.nodes);\n        const addNodes = [];\n        const addEdges = [];\n\n        elements.forEach((e) => {\n            const id = e.data.id;\n            if(ids.indexOf(id) !== -1) {\n                const index = ids.indexOf(id);\n                ids.splice(index, 1);\n            }\n            else{\n                if(e.group === \"nodes\"){\n                    addNodes.push(e);\n                }\n                else{\n                    addEdges.push(e);\n                }\n            }\n        });\n        return {removeIds : ids,addNodes : addNodes, addEdges : addEdges};\n    }\n\n    _runBuildCommands(commands)\n    {\n        this.cy.startBatch();\n\n        let changes = false;\n\n        commands.removeIds.forEach((id) => {\n            this.cy.remove(this.cy.getElementById(id));\n            changes = true;\n        });\n\n        commands.addNodes.forEach((e) => {\n            this.cy.add(e);\n            changes = true;\n        });\n\n        commands.addEdges.forEach((e) => {\n            this.cy.add(e);\n            changes = true;\n        });\n\n        if(changes){\n            this.cy.layout(layoutOptions).run();\n        }\n\n        this.cy.endBatch();\n    }\n\n    _datasetIds(data){\n        const ids = [];\n        const elements = data.edges.concat(data.nodes);\n        elements.forEach((e) => {\n            ids.push(e.data.id);\n        });\n        return ids;\n    }\n\n    _processData() {\n        const instances = DataEngine.getEngine().storage;\n\n        const edges = [];\n        const nodes = [];\n\n        let masterId = 1;\n\n        const clusterBrokersList = DataEngine.getEngine().clusterBrokerList;\n        let showClusterBrokers = false;\n        const clusterBrokers = [];\n\n        if (Array.isArray(clusterBrokersList)) {\n            showClusterBrokers = true;\n            clusterBrokersList.forEach((v, id) => {\n                const nodeId = 'cBroker'+v+id;\n                nodes.push({\n                    data : {\n                        id: nodeId,\n                        label: 'Cluster-Broker ' + id,\n                    },\n                    group: \"nodes\",\n                    classes: '11'\n                });\n                clusterBrokers.push(nodeId);\n            });\n        }\n\n        for (let instanceId in instances) {\n            if (instances.hasOwnProperty(instanceId)) {\n                const nodeMasterId = instanceId+'-master';\n                nodes.push({\n                    data : {\n                        id: nodeMasterId,\n                        label: 'Master ' + masterId,\n                    },\n                    group: \"nodes\",\n                    classes: '11 master'\n                });\n\n                const instance = instances[instanceId];\n                const workers = instance.workers;\n\n                for (let workerFullId in workers) {\n                    if (workers.hasOwnProperty(workerFullId)) {\n                        const workerNodeId = instanceId+'-worker-'+workerFullId;\n                        nodes.push({\n                            data : {\n                                id: workerNodeId,\n                                label: 'Worker ' + workers[workerFullId].id,\n                            },\n                            group: \"nodes\",\n                            classes: '11'\n                        },);\n                        edges.push({\n                            data : {\n                                id : nodeMasterId+workerNodeId,\n                                source: nodeMasterId,\n                                target: workerNodeId,\n                            },\n                            group: \"edges\"\n                        });\n                    }\n                }\n\n                let brokers;\n                if (instance.brokers) {\n                    brokers = instance.brokers;\n                } else {\n                    brokers = {};\n                    for (let i = 0; i <= instance.brokerCount; i++) {\n                        brokers[i] = null;\n                    }\n                }\n\n                for (let brokerId in brokers) {\n                    if (brokers.hasOwnProperty(brokerId)) {\n                        const brokerNodeId = instanceId+'-broker-'+brokerId;\n                        nodes.push({\n                            data : {\n                                id: brokerNodeId,\n                                label: 'Broker ' + brokerId,\n                            },\n                            group: \"nodes\",\n                            classes: '11'\n                        });\n                        edges.push({\n                            data : {\n                                id : nodeMasterId+brokerNodeId,\n                                source: nodeMasterId,\n                                target: brokerNodeId,\n                            },\n                            group: \"edges\"\n                        });\n\n                        if (showClusterBrokers) {\n                            for(let i = 0; i < clusterBrokers.length; i++) {\n                                edges.push({\n                                    data : {\n                                        id : brokerNodeId+clusterBrokers[i],\n                                        source: brokerNodeId,\n                                        target: clusterBrokers[i]\n                                    },\n                                    group: \"edges\"\n                                });\n                            }\n                        }\n                    }\n                }\n                masterId++;\n            }\n        }\n        return {\n            nodes: nodes,\n            edges: edges\n        }\n    }\n\n    render() {\n        return (\n            <RTInfoCard value={'Network'} showTimeControl={true} onTimeChange={this.timeChange.bind(this)} big={true} height={'35rem'}>\n                <div className=\"chart-wrapper mx-3\" style={{height: '15rem'}}>\n                    <div id={\"cy-\"+this.id} style={{height : '30.5rem', top : '-14.5rem',position : 'relative'}}/>\n                </div>\n            </RTInfoCard>\n        )\n    }\n\n    timeChange(state){\n        if(!state && this.state.isRunning){\n            clearInterval(this.state.interval);\n            this.setState({isRunning : false});\n        }\n\n        if(state && !this.state.isRunning){\n            this.process.bind(this)();\n            this.setInterval.bind(this)();\n        }\n    }\n\n    componentDidMount() {\n        this.cy = cytoscape({\n            container: document.getElementById('cy-'+this.id),\n            layout : layoutOptions,\n            style: [\n                {\n                    selector: 'node',\n                    style: {\n                        'background-color': '#3099bb',\n                    }\n                },\n                {\n                    selector: '.master',\n                    style: {\n                        'background-color': '#2be162',\n                    }\n                },\n                {\n                    selector: 'edge',\n                    style: {\n                        'line-color': '#26292d',\n                        'opacity': 1\n                    }\n                }\n            ],\n            elements : this.currentData\n        });\n\n        this.cy.nodeHtmlLabel([{\n            query: '.11',\n            valign: \"top\",\n            halign: \"center\",\n            valignBox: \"top\",\n            halignBox: \"center\",\n            tpl: function(data) {\n                return '<p class=\"cy-title__p1\">' + data.label + '</p>';\n            }\n        }]);\n\n        this.setInterval();\n    }\n\n    setInterval(){\n        const interval = setInterval(() => {\n            this.process.bind(this)();\n\n        }, this.props.every || 5000);\n\n        this.setState({interval: interval, isRunning: true});\n    }\n\n    componentWillUnmount() {\n        if (this.state.interval) {\n            clearInterval(this.state.interval);\n        }\n    }\n}\n\nRealTimeNetworkCard.id = 0;\n\nexport default RealTimeNetworkCard;","import React, {Component} from 'react';\nimport './dashboard.css';\nimport DataEngine from \"../../../core/DataEngine\";\nimport RealTimeCard from \"../../../components/realTimeCardCharts/RealTimeCard\";\nimport BigRealTimeCard from \"../../../components/realTimeCardCharts/BigRealTimeCard\";\nimport RealTimePercentCard from \"../../../components/realTimeCardCharts/RealTimePercentCard\";\nimport RealTimeNetworkCard from \"../../../components/realTimeCardCharts/RealTimeNetworkCard\";\n\nclass Dashboard extends Component {\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"animated fadeIn\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-6 col-lg-3\">\n                            <RealTimeCard getDataLabel={Dashboard.getClientsConnectedDesc} getDescription={Dashboard.getClientsConnectedDesc} maxLength={10} getData={Dashboard.getClientsConnected} every={2000}/>\n                        </div>\n                        <div className=\"col-sm-6 col-lg-3\">\n                            <RealTimeCard dataLabel={\"Worker\"} getDescription={Dashboard.getWorkerDesc} getData={Dashboard.getWorkerOnline} maxLength={10} every={4000} />\n                        </div>\n                        <div className=\"col-sm-6 col-lg-3\">\n                            <RealTimePercentCard description=\"Cpu usage\" getPercent={Dashboard.getCpuUsage} every={1000}/>\n                        </div>\n                        <div className=\"col-sm-6 col-lg-3\">\n                            <RealTimeCard dataLabel={\"Memory usage\"} description=\"Memory usage\" getData={Dashboard.getMemoryUsage} every={2000}  maxLength={10} postFix={\"mb\"} getValue={Dashboard.getMemoryUsagePercent}/>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-lg-12\">\n                            <BigRealTimeCard description=\"Requests in total\" label={['WebSocket Requests','HTTP Requests']}\n                                             getValue={(v) => {return v.reduce((a, b) => a + b, 0);}} getData={Dashboard.getRequestData} maxLength={40} every={1000}/>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-lg-12\">\n                            <RealTimeNetworkCard every={5000}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    static getRequestData() {\n        return [DataEngine.getEngine().clusterInfoStorage.wsRequests,\n            DataEngine.getEngine().clusterInfoStorage.httpRequests];\n    }\n\n    static getWorkerDesc() {\n        return \"Worker online (\" + DataEngine.getEngine().instanceCount + \" Server)\"\n    }\n\n    static getClientsConnectedDesc(v) {\n        return (v > 1 || v === 0) ? \"Clients connected\" : \"Client connected\";\n    }\n\n    static getClientsConnected() {\n        return DataEngine.getEngine().clusterInfoStorage.clientCount;\n    }\n\n    static getCpuUsage() {\n        return Number(DataEngine.getEngine().clusterInfoStorage.cpu).toFixed(1);\n    }\n\n    static getMemoryUsage() {\n        return Number(DataEngine.getEngine().clusterInfoStorage.memory.usedMemMb).toFixed(1);\n    }\n\n    static getMemoryUsagePercent(current)\n    {\n        return Number((current / DataEngine.getEngine().clusterInfoStorage.memory.totalMemMb) * 100).toFixed(1) + ' %';\n    }\n\n    static getWorkerOnline() {\n        return DataEngine.getEngine().workerCount;\n    }\n\n}\n\nexport default Dashboard;\n","import React, {Component} from 'react';\nimport MaterialTable from 'material-table'\nimport RTInfoCard from \"../infoCard/RTInfoCard\";\nimport \"./rtTableCard.css\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n    overrides: {\n        MuiPaper: {\n            root: {\n                top: '-1rem !important',\n                boxShadow: 'none !important',\n                backgroundColor: 'transparent !important'\n            }\n        },\n        MuiTableCell : {\n            root : {\n                color: 'white !important',\n                fontFamily: \"NexaBold\",\n                padding: '4px 16px 4px 24px'\n            }\n        },\n        MuiTableSortLabel : {\n            root : {\n                '&:hover' : {\n                    color: 'rgba(43, 225, 98,1.0) !important'\n                },\n                '&:focus' : {\n                    color: 'rgba(255, 225, 255,1.0) !important'\n                }\n            },\n            active : {\n                color: 'rgba(43, 225, 98,1.0) !important'\n            }\n        },\n        MuiIconButton : {\n            label : {\n                '&:focus' : {\n                    outline : 'none'\n                }\n            }\n        }\n    }\n});\n\nclass RTTableCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isRunning : true,\n            data : this.props.getData()\n        };\n    }\n\n    render() {\n        return (\n            <div className={\"tableCard\"}>\n            <RTInfoCard value={this.props.value} big={true} minHeight={'29rem'} green={true} onTimeChange={this.timeChange.bind(this)}>\n                <div className=\"chart-wrapper mx-3 table-con\">\n                    <MuiThemeProvider theme={theme}>\n                    <MaterialTable actions={this.props.actions} columns={this.props.columns} data={this.state.data} title={\"\"}\n                        options={{\n                            paging: false,\n                            toolbar: false\n                        }} headerStyle={{backgroundColor : 'black'}}\n                    />\n                    </MuiThemeProvider>\n                </div>\n            </RTInfoCard>\n            </div>\n        )\n    }\n\n    timeChange(state){\n        if(!state && this.state.isRunning){\n            clearInterval(this.state.interval);\n            this.setState({isRunning : false});\n        }\n\n        if(state && !this.state.isRunning){\n            this.process.bind(this)();\n            this.componentDidMount.bind(this)();\n        }\n    }\n\n    componentDidMount() {\n\n        const interval = setInterval(() => {\n            this.process.bind(this)();\n\n        },this.props.every || 1000);\n\n        this.setState({interval : interval,isRunning : true})\n    }\n\n    process()\n    {\n        this.setState({\n           data : this.props.getData()\n        });\n    }\n\n    componentWillUnmount() {\n        if(this.state.interval){\n            clearInterval(this.state.interval);\n        }\n    }\n}\n\nexport default RTTableCard;","/*\nAuthor: Luca Scaringella\nGitHub: LucaCode\n©Copyright by Luca Scaringella\n */\n\nexport default class Time {\n\n    static processDate(timestamp){\n        return new Date(timestamp).toUTCString();\n    }\n\n    static processAge(timestamp) {\n       let timespan = Date.now() - timestamp;\n        if(timespan < 1000) {\n           return '1 sec';\n       }\n       else if(timespan < 60000) {\n           // under 1 min\n           return parseInt(timespan / 1000) + ' sec';\n       }\n       else if(timespan < 3.6e+6) {\n           // under 1 hour\n           return parseInt(timespan / 60000) + ' min';\n       }\n       else if(timespan < 8.64e+7) {\n           // under day\n           const res = parseInt(timespan / 3.6e+6);\n           return res + (res === 1 ? ' hour' : ' hours');\n       }\n       else if(timespan < 6.048e+8) {\n           // under week\n           const res = parseInt(timespan / 8.64e+7);\n           return res + (res === 1 ? ' day' : ' days');\n       }\n       else if(timespan < 2.628e+9) {\n           // under month\n           const res = parseInt(timespan / 6.048e+8);\n           return res + (res === 1 ? ' week' : ' weeks');\n       }\n       else if(timespan < 3.154e+10) {\n           // under year\n           const res = parseInt(timespan / 2.628e+9);\n           return res + (res === 1 ? ' month' : ' months');\n       }\n       else {\n           const res = parseInt(timespan / 3.154e+10);\n           return res + (res === 1 ? ' year' : ' years');\n       }\n    }\n}\n","import React, {Component} from 'react';\nimport \"./tableProgressRow.css\";\n\nclass TableProgressRow extends Component {\n\n    render() {\n        return (\n            <div className={\"cardTooltip\"} style={{maxWidth: '100px',width: '8rem', backgroundColor: '#999999', height: 20}}>\n                <div style={{textAlign: 'left', padding: 1, color: 'white', width: this.props.progress, backgroundColor: 'rgba(43, 225, 98,1.0)', height: 20}}/>\n                <span className=\"tooltipText\">{this.props.progress}</span>\n            </div>\n        )\n    }\n\n}\n\nexport default TableProgressRow;","import React, {Component} from 'react';\nimport BigRealTimeCard from \"../../../components/realTimeCardCharts/BigRealTimeCard\";\nimport DataEngine from \"../../../core/DataEngine\";\nimport RTTableCard from \"../../../components/realTimeCardCharts/RTTableCard\";\nimport Time from \"../../../core/Time\";\nimport {FaCheck, FaInfoCircle, FaTimes} from 'react-icons/fa';\nimport TableProgressRow from \"../../../components/chartTools/TableProgressRow\";\n\nconst serverTableColumns = [\n    {title: 'Leader', field: 'leader', filtering: false, render: rowData => {\n            if(rowData.leader) {\n                return <FaCheck height={20}/>\n            }\n            else{\n                return <FaTimes height={20}/>\n            }\n        }},\n    {title: 'Id', field: 'id'},\n    {title: 'Age', field: 'age', filtering: false},\n    {title: 'Client/s', field: 'clientCount'},\n    {title: 'Cpu Usage', field: 'cpu', render: rowData => {\n            return (\n               <TableProgressRow progress={rowData.cpu + '%'}/>\n            );\n        }},\n    {title: 'Memory Usage', field: 'memory', render: rowData => {\n            return (\n                <TableProgressRow progress={rowData.memory + '%'}/>\n            );\n        }},\n    {title: 'Worker', field: 'workerCount', type: 'numeric'},\n    {title: 'Broker', field: 'brokerCount', type: 'numeric'},\n    {title: 'Request/s', field: 'requestCount', type: 'numeric'},\n];\n\nclass Server extends Component {\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"animated fadeIn\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-6 col-lg-6\">\n                            <BigRealTimeCard legend={false} description=\"Cpu usage\" getData={Server.getCpuUsage} maxLength={20}\n                                             every={1000} postFix={\"%\"} label={[\"Cpu usage\"]}/>\n                        </div>\n                        <div className=\"col-sm-6 col-lg-6\">\n                            <BigRealTimeCard legend={false} label={\"Memory usage\"} description=\"Memory usage\" getData={Server.getMemoryUsage}\n                                             every={2000}  maxLength={10} postFix={\"mb\"} getValue={Server.getMemoryUsagePercent}/>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-lg-12\">\n                            <RTTableCard actions={[{\n                                    icon: FaInfoCircle,\n                                    tooltip: 'Show more information',\n                                    onClick: (event, rowData) => {this.props.history.push('server/'+rowData.id);},\n                                    iconProps: {\n                                        style:{\n                                            fontSize: 30\n                                        }\n                                    }\n                                }\n                            ]} columns={serverTableColumns} getData={Server.getServerTableData} value={\"Server\"}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    static getServerTableData()\n    {\n        const dataset = [];\n        const instances = DataEngine.getEngine().storage;\n        for(let instanceId in instances){\n            if(instances.hasOwnProperty(instanceId)){\n                const instance = instances[instanceId];\n                const workers = instance.workers;\n                let workerCount = 0,clientCount = 0,reqCount = 0;\n                for(let workerId in workers){\n                    if(workers.hasOwnProperty(workerId)){\n                        workerCount++;\n                        const worker = workers[workerId];\n                        clientCount+=worker.clientCount;\n                        reqCount+=worker.httpRequests;\n                        reqCount+=worker.wsRequests;\n                    }\n                }\n\n                let data = {\n                    id : instanceId,\n                    leader: instance.master.isLeader,\n                    age : Time.processAge(instance.serverStartedTimestamp),\n                    workerCount : workerCount,\n                    brokerCount : instance.brokerCount,\n                    requestCount : reqCount,\n                    cpu : instance.cpu,\n                    clientCount : clientCount,\n                    memory : '?'\n                };\n\n                if(instance.memory){\n                    data.memory = Number((instance.memory.usedMemMb * 100) / instance.memory.totalMemMb).toFixed(1);\n                }\n\n                dataset.push(data);\n            }\n        }\n        return dataset;\n    }\n\n    static getCpuUsage() {\n        return [Number(DataEngine.getEngine().clusterInfoStorage.cpu).toFixed(1)];\n    }\n\n    static getMemoryUsage() {\n        return [Number(DataEngine.getEngine().clusterInfoStorage.memory.usedMemMb).toFixed(1)];\n    }\n\n    static getMemoryUsagePercent(current)\n    {\n        return Number((current / DataEngine.getEngine().clusterInfoStorage.memory.totalMemMb) * 100).toFixed(1) + ' %';\n    }\n\n}\n\nexport default Server;\n","import React, {Component} from 'react';\nimport './infoCard.css'\n\nclass InfoCard extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n          play : true\n        };\n    }\n\n    render() {\n        return (\n            <div className={\"text-white bg-info card\" + (this.props.big ? ' big-card' : '') + (this.props.extraBig ? ' extra-big-card' : '')}>\n                <div className=\"pb-0 card-body\">\n                    <div className=\"text-value\">\n                        {this.props.value}\n                    </div>\n                    <div>\n                        {this.props.description}\n                    </div>\n                </div>\n                {this.props.children}\n            </div>\n        )\n    }\n\n}\n\nexport default InfoCard;\n","\nexport const zeroCompensation = {\n    renderZeroCompensation: function (chartInstance, d) {\n\n        const view = d._view;\n        const context = chartInstance.chart.ctx;\n        const startX = view.x - view.width / 2;\n        context.beginPath();\n        context.strokeStyle = '#aaaaaa';\n        context.moveTo(startX, view.y);\n        context.lineTo(startX + view.width, view.y);\n        context.stroke();\n    },\n\n    afterDatasetsDraw: function (chart, easing) {\n        const meta = chart.getDatasetMeta(0);\n        const dataSet = chart.config.data.datasets[0].data;\n        meta.data.forEach((d, index) => {\n            if(dataSet[index] === 0) {\n                this.renderZeroCompensation(chart, d)\n            }\n        })\n    }\n};","import React, {Component} from 'react';\nimport InfoCard from \"../../components/infoCard/InfoCard\";\nimport {Bar} from \"react-chartjs-2\";\nimport CustomTooltips from \"../../components/chartTools/customTooltips\";\nimport {zeroCompensation} from \"../chartTools/barZeroCompensation\";\n\nclass BigBarCardInfo extends Component {\n\n    constructor(props) {\n        super(props);\n\n\n        this.chartOptions = {\n            scaleBeginAtZero:true,\n            barBeginAtOrigin:true,\n            tooltips: {\n                enabled: false,\n                custom: CustomTooltips\n            },\n            maintainAspectRatio: false,\n            legend: {\n                display: false,\n            },\n\n            scales: {\n                xAxes: [\n                    {\n                        display: false,\n                        barPercentage: 0.8,\n                    }],\n                yAxes: [\n                    {\n                        ticks : {\n                            beginAtZero:true,\n                            suggestedMin: 0,\n                            min: 0\n                        },\n                        display: true,\n                    }],\n            },\n        };\n\n        if(this.props.postFix){\n            this.chartOptions.tooltips.callbacks = {\n                label: (tooltipItems) => {\n                    return tooltipItems.yLabel + ' ' + this.props.postFix;\n                }\n            };\n        }\n\n    }\n\n    buildDataSet()\n    {\n        return {\n            labels: this.props.label,\n            datasets: [\n                {\n                    backgroundColor: 'rgba(48, 153, 187,1)',\n                    borderColor: 'rgba(48, 153, 187,1)',\n                    data: this.props.data\n                }\n            ],\n        };\n\n    }\n\n    render() {\n        return (\n            <InfoCard value={this.props.value} extraBig={true} big={true}\n                      description={this.props.description}>\n                <div className=\"chart-wrapper mx-3\" style={{ height: '300px'}}>\n                    <Bar options={this.chartOptions} data={this.buildDataSet.bind(this)()} height={800} plugins={[zeroCompensation]}\n                         redraw={this.props.redraw}\n                     />\n                </div>\n            </InfoCard>\n        )\n    }\n\n}\n\nexport default BigBarCardInfo;\n","import React, {Component} from 'react';\nimport RCenter from \"react-center\";\nimport {ClipLoader, ScaleLoader} from \"react-spinners\";\nimport BigBarCardInfo from \"../../../components/infoCard/BigBarCardInfo\";\nimport {load} from 'zation-client';\nimport Fab from \"@material-ui/core/es/Fab/Fab\";\nimport {withStyles} from \"@material-ui/core\";\nimport './ping.css';\n\nconst styles = theme => ({\n    fab: {\n        margin: theme.spacing.unit\n    },\n    extendedIcon: {\n        marginRight: theme.spacing.unit,\n    },\n});\n\nclass Ping extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            mode : 'load',\n            btnLoad : false\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        const {mode} = this.state;\n        if(mode === 'load') {\n            return (\n                <div className=\"container-fluid\">\n                    <div className=\"animated fadeIn\">\n                        <RCenter className={\"fullHeight loaderDown\"}>\n                            <ScaleLoader\n                                heightUnit={\"em\"}\n                                widthUnit={\"em\"}\n                                height={7}\n                                width={0.6}\n                                color={'#3099bb'}\n                            />\n                        </RCenter>\n                    </div>\n                </div>\n            )\n        }\n        else if(mode === 'result')\n        {\n            return (\n                <div className=\"container-fluid\">\n                    <div className=\"animated fadeIn\">\n                        <BigBarCardInfo postFix={\"ms\"} label={this.state.label}\n                                        description=\"Average ping time\"\n                                        data={this.state.data} value={this.state.avg + \" ms\"}\n                                        redraw={true}\n                        />\n                    </div>\n                    <div className={'btnContainer pingBtn-co'}>\n                        <Fab variant=\"extended\" aria-label=\"Delete\" onClick={this.refresh.bind(this)} className={'btn loginBtn '+classes.fab}>\n                            {!this.state.btnLoad ? \"Refresh\" : <ClipLoader color={'white'}/>}\n                        </Fab>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    refresh() {\n        this.setState({btnLoad : true});\n        this.process.bind(this)();\n\n    }\n\n    componentDidMount() {\n        this._isMount = true;\n        if(this.state.mode === 'load') {\n           this.process.bind(this)();\n        }\n    }\n\n    process(){\n        (async () => {\n            const client = load();\n\n            const label = [];\n            const data = [];\n\n            for(let i = 1; i < 21; i++) {\n                label.push(\"Ping \" + i);\n                data.push(await client.ping());\n            }\n\n            const sum = data.reduce(function(a, b) { return a + b; });\n\n            this.setState({\n                label : label,\n                avg : Number(sum / data.length).toFixed(2),\n                mode : 'result',\n                data : data,\n                btnLoad : false\n            });\n\n        })();\n    }\n\n    componentWillUnmount() {\n        this._isMount = false;\n    }\n\n    setState(params) {\n        if (this._isMount) {\n            super.setState(params);\n        }\n    }\n\n\n}\n\nexport default withStyles(styles)(Ping);\n","import React, {Component} from 'react';\nimport RTInfoCard from \"../../components/infoCard/RTInfoCard\";\nimport {Pie} from \"react-chartjs-2\";\n\nconst chartOptions = {\n    maintainAspectRatio: false,\n    legend: {\n        display: true,\n        labels : {\n            fontColor : '#ffffff'\n        },\n        position : 'bottom',\n        borderColor : '#343a40'\n    },\n    layout: {\n        padding: {\n            top: 8,\n            right : 8,\n            left : 8,\n            bottom : 15\n        }\n    }\n};\n\nclass RTPieCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isRunning : true,\n            data : this.props.getData()\n        };\n    }\n\n    render() {\n        return (\n            <RTInfoCard value={this.getValue.bind(this)()} big={true} height={'29rem'}\n                        description={this.getDescription.bind(this)()} onTimeChange={this.timeChange.bind(this)}>\n                <div className=\"chart-wrapper mx-3\" style={{ height: '400px'}}>\n                    <Pie options={chartOptions} data={this.state.data} height={195}/>\n                </div>\n            </RTInfoCard>\n        )\n    }\n\n    getDescription()\n    {\n        if(this.props.description){\n            return this.props.description;\n        }\n        if(this.props.getDescription){\n            return this.props.getDescription(this.state.value);\n        }\n        else {\n            return '';\n        }\n    }\n\n    getValue() {\n        if(this.props.getValue){\n            return this.props.getValue(this.state.value);\n        }\n        else {\n            return this.props.postFix ? this.state.value + \" \" + this.props.postFix : this.state.value;\n        }\n    }\n\n    timeChange(state){\n        if(!state && this.state.isRunning){\n            clearInterval(this.state.interval);\n            this.setState({isRunning : false});\n        }\n\n        if(state && !this.state.isRunning){\n            this.process.bind(this)();\n            this.componentDidMount.bind(this)();\n        }\n    }\n\n    componentDidMount() {\n\n        const interval = setInterval(() => {\n            this.process.bind(this)();\n\n        },this.props.every || 1000);\n\n        this.setState({interval : interval,isRunning : true})\n    }\n\n    process()\n    {\n        this.setState({\n            data : this.props.getData()\n        });\n    }\n\n    componentWillUnmount() {\n        if(this.state.interval){\n            clearInterval(this.state.interval);\n        }\n    }\n}\n\nexport default RTPieCard;","import React, {Component} from 'react';\nimport RTInfoCard from \"../../components/infoCard/RTInfoCard\";\nimport {Bar} from \"react-chartjs-2\";\nimport CustomTooltips from \"../../components/chartTools/customTooltips\";\nimport {zeroCompensation} from \"../chartTools/barZeroCompensation\";\n\nclass RTSwitchBarCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.chartOptions = {\n            scaleBeginAtZero:true,\n            barBeginAtOrigin:true,\n            tooltips: {\n                enabled: false,\n                custom: CustomTooltips\n            },\n            maintainAspectRatio: false,\n            legend: {\n                display: false,\n            },\n\n            scales: {\n                xAxes: [\n                    {\n                        display: false,\n                        barPercentage: 0.8,\n                    }],\n                yAxes: [\n                    {\n                        ticks : {\n                            beginAtZero:true,\n                            suggestedMin: 0,\n                            min: 0,\n                            callback: function (value) { if (Number.isInteger(value)) { return value; } },\n                            stepSize: 1\n                        },\n                        display: true,\n                    }],\n            },\n        };\n\n        if(this.props.postFix){\n            this.chartOptions.tooltips.callbacks = {\n                label: (tooltipItems) => {\n                    return tooltipItems.yLabel + ' ' + this.props.postFix;\n                }\n            };\n        }\n\n        this.switchDefault = this.props.getSwitchDefault();\n\n        this.state = {\n            isRunning : true,\n            data : this.props.getData(this.switchDefault),\n            switch : this.switchDefault\n        };\n    }\n\n    render() {\n        return (\n            <RTInfoCard value={this.getValue.bind(this)()} big={true} switch={true} switchDefault={this.switchDefault}\n                        onSwitchChange={this.switchChange.bind(this)} height={'29rem'}\n                        description={this.getDescription.bind(this)()} onTimeChange={this.timeChange.bind(this)}>\n                <div className=\"chart-wrapper mx-3\" style={{ height: '320px'}}>\n                    <Bar options={this.chartOptions} data={this.state.data} height={500} plugins={[zeroCompensation]}\n                         redraw={this.props.redraw}\n                    />\n                </div>\n            </RTInfoCard>\n        )\n    }\n\n    getDescription()\n    {\n        if(this.props.description){\n            return this.props.description;\n        }\n        if(this.props.getDescription){\n            return this.props.getDescription(this.state.switch);\n        }\n        else {\n            return '';\n        }\n    }\n\n    getValue() {\n        if(this.props.value){\n            return this.props.value;\n        }\n        else if(this.props.getValue){\n            return this.props.getValue(this.state.value);\n        }\n        else {\n            return this.props.postFix ? this.state.value + \" \" + this.props.postFix : this.state.value;\n        }\n    }\n\n    timeChange(state){\n        if(!state && this.state.isRunning){\n            clearInterval(this.state.interval);\n            this.setState({isRunning : false});\n        }\n\n        if(state && !this.state.isRunning){\n            this.process.bind(this)();\n            this.componentDidMount.bind(this)();\n        }\n    }\n\n    switchChange(state){\n        this.setState({switch : state});\n        this.process();\n    }\n\n    componentDidMount() {\n\n        const interval = setInterval(() => {\n            this.process.bind(this)();\n\n        },this.props.every || 1000);\n\n        this.setState({interval : interval,isRunning : true})\n    }\n\n    process(){\n        this.setState({\n            data : this.props.getData(this.state.switch)\n        });\n    }\n\n\n    componentWillUnmount() {\n        if(this.state.interval){\n            clearInterval(this.state.interval);\n        }\n    }\n}\n\nexport default RTSwitchBarCard;","import React, {Component} from 'react';\nimport BigRealTimeCard from \"../../../components/realTimeCardCharts/BigRealTimeCard\";\nimport DataEngine from \"../../../core/DataEngine\";\nimport RTPieCard from \"../../../components/realTimeCardCharts/RTPieCard\";\nimport RTSwitchBarCard from \"../../../components/realTimeCardCharts/RTSwitchBarCard\";\n\nconst color = ['#F47B00','#2BE162','#FF4D31','#2EAFD3','#A5F62F'];\n\nclass Clients extends Component {\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"animated fadeIn\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-lg-12\">\n                            <BigRealTimeCard redraw={true} getValue={(v) => {return v[0]}}\n                                             getData={Clients.getClientCount} maxLength={40} every={1000}\n                                             getDataLabel={Clients.getClientsConnectedDesc} getDescription={Clients.getClientsConnectedDesc}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-lg-6\">\n                            <RTPieCard getData={Clients.getPieUserGroupsData} every={1000}\n                                       getValue={Clients.getPieUserGroupsValue} description={\"User groups\"}\n                            />\n                        </div>\n                        <div className=\"col-sm-12 col-lg-6\">\n                            <RTSwitchBarCard getData={Clients.getClientDistributionData} every={1000} postFix={\"Client/s\"}\n                                       value={\"Client distribution\"} getSwitchDefault={Clients.getClientDistributionSwitchDefault}\n                                             getDescription={Clients.getClientDistributionDesc}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    static getClientDistributionDesc(state) {\n        return state ? 'On server' : 'On worker';\n    }\n\n    static getClientDistributionData(state)\n    {\n        const labels = [];\n        const data = [];\n\n        const dataEngine = DataEngine.getEngine();\n        const instances = dataEngine.storage;\n\n        if(state){\n            let i = 1;\n            for(let instanceId in instances){\n                if(instances.hasOwnProperty(instanceId)) {\n                    labels.push('Server ' + i);\n                    const workers = instances[instanceId].workers;\n                    let count = 0;\n                    for(let workerId in workers){\n                         if(workers.hasOwnProperty(workerId)){\n                             count+=workers[workerId].clientCount;\n                         }\n                    }\n                    data.push(count);\n                    i++;\n                }\n            }\n        }\n        else{\n            let instanceNum = 1;\n            for(let instanceId in instances){\n                if(instances.hasOwnProperty(instanceId)) {\n                    const workers = instances[instanceId].workers;\n                    for(let workerId in workers){\n                        if(workers.hasOwnProperty(workerId)){\n                            labels.push('Server ' + instanceNum+' - Worker '+workers[workerId].id);\n                            data.push(workers[workerId].clientCount);\n                        }\n                    }\n                    instanceNum++;\n                }\n            }\n        }\n\n        return {\n            labels: labels,\n            datasets: [{\n                backgroundColor: 'rgba(48, 153, 187,1)',\n                borderColor: 'rgba(48, 153, 187,1)',\n                data: data\n            }\n            ]\n        };\n    }\n\n    static getClientDistributionSwitchDefault() {\n        return DataEngine.getEngine().instanceCount > 1;\n    }\n\n    static getPieUserGroupsData()\n    {\n        const data = {\n            labels: [],\n            datasets: [\n                {\n                    data: [],\n                    backgroundColor: [],\n                    hoverBackgroundColor: [],\n                    borderColor : '#343a40'\n                }]\n        };\n\n        const dataEngine = DataEngine.getEngine();\n\n        const user = dataEngine.clusterInfoStorage.user;\n\n        Clients._addGroup(data,user.defaultUserGroupCount,dataEngine.defaultUserName,'#3099bb');\n\n        const auth = user.authUserGroups;\n\n        let i = 0;\n        for(let group in auth){\n            if(auth.hasOwnProperty(group)){\n                let name = group;\n                if(dataEngine.panelAuthUserMap.hasOwnProperty(group)) {\n                    name = dataEngine.panelAuthUserMap[group];\n                }\n                Clients._addGroup(data,auth[group],name,color[i]);\n            }\n            i++;\n            if(i === color.length){\n                i = 0;\n            }\n        }\n        return data;\n    }\n\n    static _addGroup(data,count,label,color)\n    {\n        data.labels.push(label);\n        const dataset = data.datasets[0];\n        dataset.data.push(count);\n        dataset.backgroundColor.push(color);\n        dataset.hoverBackgroundColor.push(color);\n    }\n\n    static getPieUserGroupsValue() {\n        return ((Object.keys(DataEngine.getEngine().clusterInfoStorage.user.authUserGroups).length) +1);\n    }\n\n    static getClientsConnectedDesc(v) {\n        return (v > 1 || v === 0) ? \"Clients connected\" : \"Client connected\";\n    }\n\n    static getClientCount() {\n        return [DataEngine.getEngine().clusterInfoStorage.clientCount];\n    }\n\n}\n\nexport default Clients;\n","/*\nAuthor: Luca Scaringella\nGitHub: LucaCode\n©Copyright by Luca Scaringella\n */\n\nexport default class ObjTool {\n\n    static countKeys(obj) {\n       let i = 0;\n       for(let k in obj){\n           if(obj.hasOwnProperty(k)){\n               i++;\n           }\n       }\n       return i;\n    }\n}\n","import React, {Component} from 'react';\nimport RTInfoCard from \"../infoCard/RTInfoCard\";\nimport DataEngine from \"../../core/DataEngine\";\nimport \"./rtServerInfoCard.css\";\nimport Time from \"../../core/Time\";\nimport ObjTool from \"../../core/ObjTool\";\n\nclass RTServerInfoCard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.id = props.id;\n        this.dataEngine = DataEngine.getEngine();\n\n        this.state = {\n            isRunning : true,\n            data : this.process()\n        };\n    }\n\n    render() {\n        const {data} = this.state;\n        return (\n            <div className={\"tableCard main-font\"}>\n                <RTInfoCard value={\"Server Details\"} big={true} height={'29rem'} onTimeChange={this.timeChange.bind(this)}>\n                    <div className=\"chart-wrapper mx-3 table-con\">\n                        <div className={\"container-fluid\"}>\n                            <div className={\"row\"}>\n                                <div className=\"col-sm-6 col-lg-6\">\n                                    <p><span id=\"blue-f\">{`Id          :`}</span>&#32;{data.id}</p>\n                                    <p><span id=\"blue-f\">{`Started     :`}</span>&#32;{data.startedTime}</p>\n                                    <p><span id=\"blue-f\">{`Leader      :`}</span>&#32;{data.leader}</p>\n                                    <p><span id=\"blue-f\">{`Worker      :`}</span>&#32;{data.worker}</p>\n                                    <p><span id=\"blue-f\">{`Broker      :`}</span>&#32;{data.broker}</p>\n                                    <p><span id=\"blue-f\">{`Platform    :`}</span>&#32;{data.platform}</p>\n                                    <p><span id=\"blue-f\">{`OOS         :`}</span>&#32;{data.oos}</p>\n                                    <p><span id=\"blue-f\">{`CPU         :`}</span>&#32;{data.cpu}</p>\n                                    <p><span id=\"blue-f\">{`Drive Usage :`}</span>&#32;{data.driveUsage}</p>\n                                </div>\n                                <div className=\"col-sm-6 col-lg-6\">\n                                    <p><span id=\"blue-f\">{`Ip Address  :`}</span>&#32;{data.ip}</p>\n                                    <p><span id=\"blue-f\">{`Hostname    :`}</span>&#32;{data.hostname}</p>\n                                    <p><span id=\"blue-f\">{`Port        :`}</span>&#32;{data.port}</p>\n                                    <p><span id=\"blue-f\">{`Path        :`}</span>&#32;{data.path}</p>\n                                    <p><span id=\"blue-f\">{`Post Key     :`}</span>&#32;{data.postKey}</p>\n                                    <p><span id=\"blue-f\">{`App Name    :`}</span>&#32;{data.appName}</p>\n                                    <p><span id=\"blue-f\">{`Secure      :`}</span>&#32;{data.secure}</p>\n                                    <p><span id=\"blue-f\">{`Debug       :`}</span>&#32;{data.debug}</p>\n                                    <p><span id=\"blue-f\">{`Use ScUws   :`}</span>&#32;{data.useScUws}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </RTInfoCard>\n            </div>\n        )\n    }\n\n    process()\n    {\n        const data = {};\n        const instance = this.dataEngine.storage[this.id];\n        if(instance){\n            data.id = this.id;\n            data.ip = instance.ip;\n            data.hostname = instance.hostname;\n            data.port = instance.port;\n            data.path = instance.path;\n            data.postKey = instance.postKey;\n            data.secure = instance.secure ? 'yes' : 'no';\n            data.leader = instance.master.isLeader ? 'yes' : 'no';\n            data.startedTime = Time.processDate(instance.serverStartedTimestamp);\n            data.worker = ObjTool.countKeys(instance.workers);\n            data.broker = ObjTool.countKeys(instance.brokers);\n            data.oos = instance.oos;\n            data.cpu = instance.cpuModel;\n            data.appName = instance.appName;\n            data.platform = instance.platform;\n            data.debug = instance.debug ? 'yes' : 'no';\n            data.useScUws = instance.useScUws ? 'yes' : 'no';\n            if(instance.drive){\n                data.driveUsage = instance.drive.usedPercentage + ' %';\n            }\n            else{\n                data.driveUsage = 'Unknown';\n            }\n        }\n        return data;\n    }\n\n    timeChange(state){\n        if(!state && this.state.isRunning){\n            clearInterval(this.state.interval);\n            this.setState({isRunning : false});\n        }\n\n        if(state && !this.state.isRunning){\n            this.process.bind(this)();\n            this.componentDidMount.bind(this)();\n        }\n    }\n\n    componentDidMount() {\n\n        const interval = setInterval(() => {\n            this.setState({\n                data : this.process()\n            });\n\n        },this.props.every || 1000);\n\n        this.setState({interval : interval,isRunning : true})\n    }\n\n    componentWillUnmount() {\n        if(this.state.interval){\n            clearInterval(this.state.interval);\n        }\n    }\n}\n\nexport default RTServerInfoCard;","import React, {Component} from 'react';\nimport RealTimeCard from \"../../../components/realTimeCardCharts/RealTimeCard\";\nimport DataEngine from \"../../../core/DataEngine\";\nimport RTTableCard from \"../../../components/realTimeCardCharts/RTTableCard\";\nimport Time from \"../../../core/Time\";\nimport {FaCheck, FaTimes} from \"react-icons/fa\";\nimport TableProgressRow from \"../../../components/chartTools/TableProgressRow\";\nimport RTServerInfoCard from \"../../../components/realTimeCardCharts/RTServerInfoCard\";\n\nconst workerTableColumns = [\n    {title: 'Leader', field: 'leader', filtering: false, render: rowData => {\n            if(rowData.leader) {\n                return <FaCheck height={20}/>\n            }\n            else{\n                return <FaTimes height={20}/>\n            }\n        }},\n    {title: 'Id', field: 'id'},\n    {title: 'Age', field: 'age', filtering: false},\n    {title: 'Client/s', field: 'clientCount'},\n    {title: 'Cpu Usage', field: 'cpu', render: rowData => {\n            return (\n                <TableProgressRow progress={rowData.cpu + '%'}/>\n            );\n        }},\n    {title: 'Memory Usage', field: 'memory', render: rowData => {\n            return (\n                <TableProgressRow progress={rowData.memory + '%'}/>\n            );\n        }},\n    {title: 'Request/s', field: 'requestCount', type: 'numeric'},\n];\n\nconst brokerTableColumns = [\n    {title: 'Id', field: 'id'},\n    {title: 'Age', field: 'age', filtering: false},\n    {title: 'Cpu Usage', field: 'cpu', render: rowData => {\n            return (\n                <TableProgressRow progress={rowData.cpu + '%'}/>\n            );\n        }},\n    {title: 'Memory Usage', field: 'memory', render: rowData => {\n            return (\n                <TableProgressRow progress={rowData.memory + '%'}/>\n            );\n        }}\n];\n\nclass ServerDetail extends Component {\n    constructor(props){\n        super(props);\n\n        this.id = props.match.params.id\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"animated fadeIn\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-lg-12\">\n                           <RTServerInfoCard id={this.id}/>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-6 col-lg-3\">\n                            <RealTimeCard getDataLabel={ServerDetail.getClientsConnectedDesc}\n                                          getDescription={ServerDetail.getClientsConnectedDesc} maxLength={20}\n                                          getData={this.getClientsConnected.bind(this)} every={2000}/>\n                        </div>\n                        <div className=\"col-sm-6 col-lg-3\">\n                            <RealTimeCard getDataLabel={ServerDetail.getRequestsDesc}\n                                          getDescription={ServerDetail.getRequestsDesc}\n                                          getData={this.getRequest.bind(this)} maxLength={20} every={4000} />\n                        </div>\n                        <div className=\"col-sm-6 col-lg-3\">\n                            <RealTimeCard dataLabel={\"Cpu usage\"} description=\"Cpu usage\"\n                                          getData={this.getCpuUsage.bind(this)}\n                                          every={2000}  maxLength={20} postFix={\"%\"}\n                            />\n                        </div>\n                        <div className=\"col-sm-6 col-lg-3\">\n                            <RealTimeCard dataLabel={\"Memory usage\"} description=\"Memory usage\"\n                                          getData={this.getMemoryUsage.bind(this)}\n                                          every={2000}  maxLength={20} postFix={\"mb\"}\n                                          getValue={this.getMemoryUsageValue.bind(this)}/>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-lg-12\">\n                            <RTTableCard columns={workerTableColumns} getData={this.getWorkerTableData.bind(this)} value={\"Worker\"}/>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-lg-12\">\n                            <RTTableCard columns={brokerTableColumns} getData={this.getBrokerTableData.bind(this)} value={\"Broker\"}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    getBrokerTableData()\n    {\n        const dataset = [];\n        const instance = DataEngine.getEngine().storage[this.id];\n        if(instance){\n            const brokers = instance.brokers;\n            for(let bId in brokers){\n                if(brokers.hasOwnProperty(bId)) {\n                    const broker = brokers[bId];\n                    dataset.push({\n                        id : bId,\n                        age : Time.processAge(broker.brokerStartedTimestamp),\n                        cpu : broker.system.cpu,\n                        memory : Number((broker.system.memory * 100) / instance.memory.totalMemMb).toFixed(1),\n                    });\n                }\n            }\n        }\n        return dataset;\n    }\n\n    getWorkerTableData()\n    {\n        const dataset = [];\n        const instance = DataEngine.getEngine().storage[this.id];\n        if(instance){\n            const workers = instance.workers;\n            for(let wId in workers){\n                if(workers.hasOwnProperty(wId)) {\n                   const worker = workers[wId];\n                   dataset.push({\n                       id : worker.id,\n                       leader : worker.id === 0,\n                       age : Time.processAge(worker.workerStartedTimestamp),\n                       clientCount : worker.clientCount,\n                       cpu : worker.cpu,\n                       memory : Number((worker.memory * 100) / instance.memory.totalMemMb).toFixed(1),\n                       requestCount : (worker.httpRequests + worker.wsRequests)\n                   });\n                }\n            }\n        }\n        return dataset;\n    }\n\n    getMemoryUsageValue(current) {\n        return Number((current / DataEngine.getEngine().storage[this.id].memory.totalMemMb) * 100).toFixed(1) + ' %';\n    }\n\n    getMemoryUsage() {\n        return Number(DataEngine.getEngine().storage[this.id].memory.usedMemMb).toFixed(1);\n    }\n\n    getCpuUsage() {\n        return Number(DataEngine.getEngine().storage[this.id].cpu).toFixed(1);\n    }\n\n    static getClientsConnectedDesc(v) {\n        return (v > 1 || v === 0) ? \"Clients connected\" : \"Client connected\";\n    }\n\n    static getRequestsDesc(v) {\n        return (v > 1 || v === 0) ? \"Requests\" : \"Request\";\n    }\n\n    getRequest()\n    {\n        const instance = DataEngine.getEngine().storage[this.id];\n        let count = 0;\n        if(instance){\n            const workers = instance.workers;\n            for(let wId in workers){\n                if(workers.hasOwnProperty(wId)) {\n                    count+=workers[wId].httpRequests;\n                    count+=workers[wId].wsRequests;\n                }\n            }\n        }\n        return count;\n    }\n\n    getClientsConnected(){\n        const instance = DataEngine.getEngine().storage[this.id];\n        let count = 0;\n        if(instance){\n            const workers = instance.workers;\n            for(let wId in workers){\n                if(workers.hasOwnProperty(wId)) {\n                    count+=workers[wId].clientCount;\n                }\n            }\n        }\n        return count;\n    }\n\n}\n\nexport default ServerDetail;\n","import React, {Component} from 'react';\nimport logo from '../../../assets/image/zationLogo.svg';\nimport {Navbar} from 'react-bootstrap';\nimport './MainPanel.css';\nimport Sidebar from \"../../../components/sidebar/Sidebar\";\nimport DataEngine from \"../../../core/DataEngine\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Dashboard from \"../dashboard/Dashboard\";\nimport Server from \"../servers/Server\";\nimport Button from \"react-bootstrap/es/Button\";\nimport avatar from './../../../assets/image/user.svg';\nimport {load} from 'zation-client';\nimport Ping from \"../ping/Ping\";\nimport Clients from \"../clients/Clients\";\nimport Chart from 'chart.js';\nimport ServerDetail from \"../servers/ServerDetail\";\nimport {devMode} from \"../../../mode\";\nimport PathTool from \"../../../core/PathTool\";\n\nChart.defaults.global.animation.duration = 1000;\n//Chart.defaults.global.animation.easing = 'easeInQuad';\n\nclass MainPanel extends Component {\n\n    constructor(props) {\n        super(props);\n\n        try {\n            this.state = {name: load().getTokenVariable('ZATION-PANEL-USER-NAME')};\n\n            DataEngine.getEngine().setTaskProcessClusterInfo();\n            DataEngine.getEngine().processClusterInfo();\n        }\n        catch (e) {\n            this.state = {name: 'Unknown name'};\n        }\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App transition-item detail-page sidebar-lg-show sidebar-fixed\">\n                    <header className=\"app-header\">\n                        <Navbar className={\"navbar\"} bg=\"dark\" variant=\"dark\">\n                            <Button className=\"navbar-toggler sidebar-toggler d-lg-none mr-auto\"\n                                    onClick={this.switchSidebar.bind(this)}>\n\n                            <span className=\"navbar-toggler-icon\">\n                            </span>\n                            </Button>\n                            <Navbar.Brand href=\"#home\" className=\"sm-auto\">\n                                <img\n                                    alt=\"\"\n                                    src={logo}\n                                    width=\"30\"\n                                    height=\"30\"\n                                    className=\"d-inline-block align-top\"\n                                />\n                                {' Zation'}\n                            </Navbar.Brand>\n                            <div className=\"profile\">\n                            <span className=\"name\">\n                                {this.state.name}\n                                </span>\n                                <li className=\"nav-item dropdown account-switch\">\n                                    <a className=\"nav-link nav-link\" href=\"/\" onClick={this.switchAccountDropDown.bind(this)}>\n                                        <img src={avatar} alt={'user'} width=\"30\" height=\"30\" className=\"account-switch\"/>\n                                    </a>\n                                    <div id=\"account-dropdown-menu\"\n                                         className=\"dropdown-menu dropdown-menu-right animated fadeIn account-switch\">\n                                        <div className=\"dropdown-header text-center account-switch\">\n                                            <strong className=\"account-switch\">\n                                                Account\n                                            </strong>\n                                        </div>\n                                        <div className=\"dropdown-item account-switch\" onClick={this.logout.bind(this)}>\n                                            <i className=\"fa fa-lock\"/>\n                                            Logout\n                                        </div>\n                                    </div>\n                                </li>\n                            </div>\n                        </Navbar>\n                    </header>\n                    <Sidebar/>\n                    <main className=\"main\">\n                        <Route exact path={PathTool.mainPath+\"/\"} component={Dashboard}/>\n                        <Route exact path={PathTool.mainPath+\"/ping\"} component={Ping}/>\n                        <Route exact path={PathTool.mainPath+\"/clients\"} component={Clients}/>\n                        <Route exact path={PathTool.mainPath+\"/server\"} component={Server}/>\n                        <Route exact path={PathTool.mainPath+\"/server/:id\"} component={ServerDetail}/>\n                    </main>\n                </div>\n            </Router>\n        )\n    }\n\n    componentDidMount() {\n        document.getElementsByTagName('body')[0].addEventListener('click',(event) => {\n            this.offAccountDropDown(event);\n        });\n    }\n\n    // noinspection JSMethodCanBeStatic\n    switchSidebar() {\n        document.getElementsByTagName('body')[0].classList.toggle('sidebar-show');\n    }\n\n    // noinspection JSMethodCanBeStatic\n    switchAccountDropDown(event) {\n        event.preventDefault();\n        document.getElementById('account-dropdown-menu').classList.toggle('show');\n    }\n\n    // noinspection JSMethodCanBeStatic\n    offAccountDropDown(event) {\n        if(!event.target.classList.contains('account-switch')) {\n            const accountDropdown = document.getElementById('account-dropdown-menu');\n            if (accountDropdown && accountDropdown.classList.contains('show')) {\n                accountDropdown.classList.remove('show');\n            }\n        }\n    }\n\n    // noinspection JSMethodCanBeStatic\n    async logout() {\n        try{\n            const client = load();\n            await client.deauthenticate();\n        }\n        catch (e) {}\n        if(devMode){\n            window.location.pathname = '';\n        }\n        else{\n            window.location.pathname = PathTool.getMainPath(window.location.pathname);\n        }\n\n    }\n\n}\n\nexport default MainPanel;\n","import React, {Component} from 'react';\nimport RCenter from 'react-center';\nimport './Error.css';\nimport Fab from \"@material-ui/core/es/Fab/Fab\";\nimport {Refresh, Warning} from '@material-ui/icons';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    fab: {\n        margin: theme.spacing.unit\n    },\n    extendedIcon: {\n        marginRight: theme.spacing.unit,\n    },\n});\n\nclass Error extends Component\n{\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className=\"App transition-item detail-page darkTheme\">\n                <RCenter className={\"fullHeight\"}>\n                    <div className={'ErrorContainer'}>\n                        <Warning className={'warningIcon bounceInDown animated'}/>\n                        <h1>{this.props.message}</h1>\n                        <Fab variant=\"extended\" aria-label=\"Delete\" onClick={this.reload} className={'btn '+classes.fab}>\n                            <Refresh className={classes.extendedIcon} />\n                            Try again\n                        </Fab>\n                    </div>\n                </RCenter>\n            </div>\n        );\n    }\n\n    reload() {\n        document.location.reload(true)\n    }\n}\n\nexport default withStyles(styles)(Error);\n\n","/*\nAuthor: Luca Scaringella\nGitHub: LucaCode\n©Copyright by Luca Scaringella\n */\n\nimport {load}        from \"zation-client\";\n\nexport default class PingEngine {\n\n    static startPing(intervalMs = 4000,key = 'default') {\n        PingEngine.interval = setInterval(async () => {\n            try {\n                await load(key).pubPanelInCh('ping',{});\n            }\n            catch (e) {}\n        },intervalMs);\n    }\n}\n\n","import React, {Component} from 'react';\nimport {create, save, load} from \"zation-client\";\nimport {devMode} from \"./mode\";\nimport {ConnectionAbortError} from \"zation-client/dist/lib/helper/error/connectionAbortError\";\nimport Loading from \"./views/loading/Loading\";\nimport Login from \"./views/login/Login\";\nimport MainPanel from \"./views/panel/main/MainPanel\";\nimport Error from \"./views/error/Error\";\nimport DataEngine from \"./core/DataEngine\";\nimport PingEngine from \"./core/PingEngine\";\nimport PathTool from \"./core/PathTool\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode : 'start',\n            errorMessage : ''\n        };\n    }\n\n    render() {\n        if(this.state.mode === 'start' || this.state.mode === 'loadPanel') {\n            return <Loading app={this}/>\n        }\n        else if(this.state.mode === 'auth'){\n            return <Login app={this}/>\n        }\n        else if(this.state.mode === 'panel') {\n            return <MainPanel app={this}/>\n        }\n        else if(this.state.mode === 'error'){\n            return <Error app={this} message={this.state.errorMessage}/>;\n        }\n    }\n\n    async loadPanel() {\n        this.setState({mode : 'loadPanel'});\n\n        const client = load();\n\n        await client.subPanelOutCh();\n\n        //connect to dataEngine and create\n        DataEngine.getEngine().connect();\n\n        await client.pubPanelInCh('firstPing',{});\n\n        //wait 3500 ms for worker can respond\n        setTimeout(() => {\n\n            //create ping interval (worker know that panel is still in use)\n            PingEngine.startPing();\n\n            this.setState({mode : 'panel'});\n        },4000);\n    }\n\n    toAuth() {\n        if(this.state.mode === 'start') {\n            setTimeout(() => {\n                this.setState({mode : 'auth'});\n            },1500);\n        }\n        else{\n            this.setState({mode : 'auth'});\n        }\n    }\n\n    setError(msg){\n        if(this.state.mode === 'start') {\n            setTimeout(() => {\n                this.setState({mode : 'error', errorMessage : msg});\n            },1500);\n        }\n        else{\n            this.setState({mode : 'error', errorMessage : msg});\n        }\n    }\n\n    componentDidMount() {\n        this._isMount = true;\n        if(this.state.mode === 'start') {\n            (async () => {\n                const client = create(!devMode ? {\n                    hostname : window.location.hostname,\n                    port :  parseInt(window.location.port),\n                    debug : false\n                } : {});\n                save(client);\n\n                client.eventReact().onDisconnect(() => {\n                    setTimeout(()=> {\n                        if(!client.isConnected()) {\n                            this.setError('The connection to the server is lost.');\n                        }\n                    },5000)\n                });\n\n                client.eventReact().onServerDeauthenticate(() => {\n                    this.toAuth();\n                });\n\n                try {\n                    await client.connect();\n\n                    if( client.getSocket().getAuthToken() !== null &&\n                        client.getTokenPanelAccess() &&\n                        client.getTokenVariable('ZATION-PANEL-USER-NAME')\n                    ) {\n                        (async () => {\n                            await this.loadPanel();\n                        })();\n                    }\n                    else {\n                        this.toAuth();\n                    }\n\n                }\n                catch (e) {\n                    if(e instanceof ConnectionAbortError) {\n                        this.setError('Could not connect to the server.');\n                    }\n                    else {\n                        this.setError('Unknown error occurred');\n                    }\n                }\n\n            })();\n        }\n    }\n\n    componentWillMount() {\n        if(devMode){\n            if(window.location.pathname !== '/') {\n                window.location.pathname = '';\n            }\n        }\n        else {\n            if(PathTool.isNotMainPath(window.location.pathname)) {\n                window.location.pathname = PathTool.getMainPath(window.location.pathname);\n            }\n            PathTool.mainPath = PathTool.getMainPath(window.location.pathname);\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMount = false;\n    }\n\n    setState(params) {\n        if (this._isMount) {\n            super.setState(params);\n        }\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.scss';\nimport './assets/libs/animate.css'\nimport './assets/libs/all.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}